<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
class Animals extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Animals_model');
        date_default_timezone_set('Asia/Karachi');
        //$this->load->library('excel');
    }

    function index()
    {
        if ($this->input->method(true) == 'POST') {
            $this->load->library('form_validation');

            if ($this->input->post('id')) {
                # Update Request
                $this->form_validation->set_rules('nameu', ' Name', 'required');
                // $this->form_validation->set_rules('codeu', ' code', 'required');
                $this->form_validation->set_rules('dobu', 'date of birth', 'required');
                $this->form_validation->set_rules('dopu', 'date of purchase', 'required');
                $this->form_validation->set_rules('breedidu', 'breed', 'required');
                // $this->form_validation->set_rules('animaltypeu', 'area', 'required');
                $this->form_validation->set_rules('sexu', 'sex', 'required');
                if ($this->form_validation->run()) {
                    
                    
                    $dateofBirth = explode(" ", $this->input->post('dobu'));
                    $dobmonth = date('m', strtotime(rtrim($dateofBirth[1])));
                    $dob = $dateofBirth[2].'-'.$dobmonth.'-'.$dateofBirth[0];


                    $dateofpurchase = explode(" ", $this->input->post('dopu'));
                    $dopmonth = date('m', strtotime(rtrim($dateofpurchase[1])));
                    $dop = $dateofpurchase[2].'-'.$dopmonth.'-'.$dateofpurchase[0];

                    // echo $dob; echo "<br>";
                    // echo $dop; echo "<br>";

                    // Left is database column name, right side is value posted from form
                    $params = array(
                        'name' => $this->input->post('nameu'),
                        // 'code' => $this->input->post('codeu'),
                        'dob' => $dob,
                        'dop' => $dop,
                        'animal_breed' => $this->input->post('breedidu'),
                        'sex' => $this->input->post('sexu'),
                        'father_id' => $this->input->post('fatheridu'),
                        'mother_id' => $this->input->post('motheridu'),
                        'weight' => $this->input->post('weightu')
                    );
                    // print_r($params);
                    // die();
                    $uom = $this->db->get_where('item_uom', array('symbol' => 'Kg'))->row_array();
                    if ($uom) {
                        $params['item_uom_id'] = $uom['id'];
                    }
                    // Image Upload Code
                    // Upload User Profile Image
                    if ($_FILES['animalimage']['name'] != '') {
                        $config['upload_path'] = FCPATH . 'assets/images/animals/';
                        $config['allowed_types'] = 'gif|jpg|png|jepg|JPG|PNG|JPEG';
                        $config['max_size'] = 2000;
                        $config['max_width'] = 1280;
                        $config['max_height'] = 1280;

                        $this->load->library('upload', $config);

                        if ($this->upload->do_upload('animalimage')) {
                            $img_data = $this->upload->data();
                            $params['avatar'] = $img_data['file_name'];
                        } else {
                            $this->session->set_flashdata('error', $this->upload->display_errors());
                            $params['avatar'] = '';
                        }
                    }
                    // Image Upload Code End
                    $this->Animals_model->update_animal($this->input->post('id'),$params);
                    //print_r($this->db->last_query());    exit;
                    $this->session->set_flashdata('success', 'Animal updated successfuly');
                    redirect('animals');
                }
            } else {
                $this->form_validation->set_rules('name', ' Name', 'required');
                $this->form_validation->set_rules('code', ' code', 'required');
                // $this->form_validation->set_rules('code', ' code', 'required|is_unique[animals.code]');
                $this->form_validation->set_rules('dob', 'date of birth', 'required');
                $this->form_validation->set_rules('breedid', 'shed', 'required');
                $this->form_validation->set_rules('animaltype', 'area', 'required');
                $this->form_validation->set_rules('sex', 'sex', 'required');
                if ($this->form_validation->run()) {
                    $dateofBirth = explode(" ", $this->input->post('dob'));
                    $dobmonth = date('m', strtotime(rtrim($dateofBirth[1])));
                    $dob = $dateofBirth[2].'-'.$dobmonth.'-'.$dateofBirth[0];


                    $dateofpurchase = explode(" ", $this->input->post('dop'));
                    $dopmonth = date('m', strtotime(rtrim($dateofpurchase[1])));
                    $dop = $dateofpurchase[2].'-'.$dopmonth.'-'.$dateofpurchase[0];

                    
                    // Left is database column name, right side is value posted from form
                    $params = array(
                        'name' => $this->input->post('name'),
                        'code' => $this->input->post('code'),
                        'dob' => $dob,
                        'dop' => $dop,
                        'animal_breed' => $this->input->post('breedid'),
                        'animal_type' => $this->input->post('animaltype'),
                        'sex' => $this->input->post('sex'),
                        'father_id' => $this->input->post('fatherid'),
                        'quarantine_period' => $this->input->post('quarantine_period'),
                        'mother_id' => $this->input->post('motherid'),
                        'created_by' => $this->session->userdata('id'),
                        'farm_id' => $this->session->userdata('active_farm'),
                        'weight' => $this->input->post('weight')
                    );
                    $uom = $this->db->get_where('item_uom', array('symbol' => 'Kg'))->row_array();
                    if ($uom) {
                        $params['item_uom_id'] = $uom['id'];
                    }
                    if ($this->session->userdata('quarantine_new_animal')) {
                        $params['status'] = QUARANTINE;
                    }
                    // Image Upload Code
                    // Upload User Profile Image
                    if ($_FILES['animalimage']['name'] != '') {
                        $config['upload_path'] = FCPATH . 'assets/images/animals/';
                        $config['allowed_types'] = 'gif|jpg|png|jepg|JPG|PNG|JPEG';
                        $config['max_size'] = 2000;
                        $config['max_width'] = 1280;
                        $config['max_height'] = 1280;

                        $this->load->library('upload', $config);

                        if ($this->upload->do_upload('animalimage')) {
                            $img_data = $this->upload->data();
                            $params['avatar'] = $img_data['file_name'];
                        } else {
                            $this->session->set_flashdata('error', $this->upload->display_errors());
                            $params['avatar'] = '';
                        }
                    } else {
                        $params['avatar'] = '';
                    }
                    // Image Upload Code End
                    //print_r($params);    exit;
                    $this->Animals_model->add_animals($params);
                    $this->session->set_flashdata('success', 'Animal added successfuly');
                    redirect('animals');
                }
            }
        }

        $this->load->model('Animaltype_model');
        $data['animaltypeid'] = $this->Animaltype_model->get_animaltype_for_dd();

        $this->load->model('Feed_model');
        $data['feed_dd'] = $this->Feed_model->get_feed_for_dd();
        $data['code'] = $this->Animals_model->get_code();
        $data['_view'] = 'animals/index';
        $this->load->view('layouts/main', $data);
    }


    function deliver_baby()
    {

        $this->load->library('form_validation');
        $this->form_validation->set_rules('name', ' Name', 'required');
        $this->form_validation->set_rules('code', ' Code', 'required');
        // $this->form_validation->set_rules('code', ' Code', 'required|is_unique[animals.code]');
        $this->form_validation->set_rules('delivery_date', 'Delivery Date', 'required');
        $this->form_validation->set_rules('db_animal_breed', 'Animal Breed', 'required');
        $this->form_validation->set_rules('db_animal_type', 'Animal Type', 'required');
        $this->form_validation->set_rules('sex', 'Gender', 'required');
        if ($this->form_validation->run()) {
            // Left is database column name, right side is value posted from form
            $params = array(
                'name' => $this->input->post('name'),
                'code' => $this->input->post('code'),
                'dob' => date('Y-m-d', strtotime($this->input->post('delivery_date'))),
                'dop' => date('Y-m-d', strtotime($this->input->post('delivery_date'))),
                'animal_breed' => $this->input->post('db_animal_breed'),
                'animal_type' => $this->input->post('db_animal_type'),
                'sex' => $this->input->post('sex'),
                'father_id' => $this->input->post('db_father_id'),
                'mother_id' => $this->input->post('db_mother_id'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm'),
                'status' => HEIFER
            );
            $pregstatus = array(
                'status' => ACTIVE
            );
            $act_delivery_date = array(
                'actual_delivery_date' => date('Y-m-d', strtotime($this->input->post('delivery_date')))
            );
            $this->db->trans_start();
            $this->db->where('id', $this->input->post('pregnancy_id'));
            $this->db->update('animal_pregnancy', $act_delivery_date);
            $this->Animals_model->update_animal($this->input->post('db_mother_id'), $pregstatus);
            $this->Animals_model->add_animals($params);
            $this->db->trans_complete();
             // Acount Journal Table Entry Sttart Here
                     $params1 = array(
                        'acc_number' => '102002',
                        'item_id' =>0,
                        'journal_details' =>'Birth Animals Entry',
                        'journal_amount' =>'3300',
                        'type' =>'Birth Animal'
                    );
         $this->db->insert('account_journal', $params1);
         $lastJournalID= $this->db->insert_id();
          $updateParam = array(
                        'ref_id' => $lastJournalID
                    );


          $this->db->where('journal_id', $lastJournalID);
         $this->db->update('account_journal', $updateParam);

           $params2 = array(
                        'ref_id' => $lastJournalID,
                        'acc_number' => '701002',
                        'item_id' =>0,
                        'journal_details' =>'Birth Animals Entry',
                        'journal_amount' =>'-3300',
                        'type' =>'Birth Animal'
                    );
            $this->db->insert('account_journal', $params2);
        // ACCOUNT jOURNAL entry End Here    
            $this->session->set_flashdata('success', 'Delivery Successful, New Heifer Animal Added');
            redirect('animals/pregnancy');
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect('animals/pregnancy');
        }
    }
    public function importAnimals(){
        if(isset($_FILES["upload_file"]["name"])){
        $file_mimes = array('text/x-comma-separated-values', 'text/comma-separated-values', 'application/octet-stream', 'application/vnd.ms-excel', 'application/x-csv', 'text/x-csv', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.msexcel', 'text/plain', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            if(isset($_FILES['upload_file']['name']) && in_array($_FILES['upload_file']['type'], $file_mimes)) {
            $arr_file = explode('.', $_FILES['upload_file']['name']);
            $extension = end($arr_file);
            if('csv' == $extension){
            $reader = new \PhpOffice\PhpSpreadsheet\Reader\Csv();
            } else {
            $reader = new \PhpOffice\PhpSpreadsheet\Reader\Xlsx();
            }
            
            $spreadsheet = $reader->load($_FILES['upload_file']['tmp_name']);
            $sheetData = $spreadsheet->getActiveSheet()->toArray();
            foreach($sheetData as $data)
			{
                if($data[0]!="Name"){
                    $dob = $data[2];
                    $dop = $data[3];
                    $Olddob = strtotime($dob);
                    $new_dob = date('Y-m-d', $Olddob);
                    $Olddop = strtotime($dop);
                    $new_dop = date('Y-m-d', $Olddop);
                    $code = $this->Animals_model->get_code();
                    $dataAnimals = array(
                                    'code' => $code,
                                    'name' => $data[0],
                                    'weight' => $data[1],
                                    'dob' => $new_dob,
                                    'dop' => $new_dop,
                                    'sex' => $data[4],
                                    'created_by' => $this->session->userdata('id'),
                                    'status' => $data[5],
                                    'animal_breed' => $this->input->post('breedid_import'),
                                    'animal_type' => $this->input->post('animaltypeid_import'),
                                    'farm_id' => $this->session->userdata('active_farm')
                            );
                $this->db->insert('animals', $dataAnimals);
                }
            }
                $this->session->set_flashdata('success', 'Animal not Imported successfuly');
                redirect('animals');
            } else {
                $this->session->set_flashdata('success', 'Animal not Imported successfuly');
                redirect('animals');
            }
            
            
            } 
    }
    function feed()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('feed_dd[]', 'Feed', 'required');
        $this->form_validation->set_rules('feed_date', 'Feeding Date', 'required');
        if ($this->form_validation->run()) {
            $animals = substr($_POST['selected_animals'], 0, -1);
            $animals = explode(',', $animals);
            // Get Animal Detals For DOB
            // var_dump($_POST['selected_animals']);exit;
            $this->db->select('animals.id,animals.dob');
            $this->db->where_in('id', $animals);
            $animals = $this->db->get('animals')->result_array();
            // Get Animal Detals For DOB End

            // Get Animal Age Calculation In Months
            $animal_daily_feed = array();
            $total_animals_to_feed = 0;
            foreach ($animals as $key => $animal) {
                $birthday = new DateTime($animal['dob']);
                $diff = $birthday->diff(new DateTime());
                $months = $diff->format('%m') + 12 * $diff->format('%y');
                $animals[$key]['age'] = $months;
                if ($months >= 2) {
                    $total_animals_to_feed++;
                }
            }
            // Get Animal Age Calculation In Months End
            $this->db->trans_start();
            // Feed Calculation Per Animal According To Age
            // $insertIds  = array();

            foreach ($_POST['feed'] as $feed_id => $feed) {
                // $qty_per_animal = $feed / $total_animals_to_feed;
                $qty_per_animal = $feed / 1;
                foreach ($animals as $key => $animal) {
                    if ($animal['age'] >= 18) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal,
                            'feed_date' => date('Y-m-d', strtotime($this->input->post('feed_date'))),
                            'feed_time' => $this->input->post('feed_time'),
                            'animal_id' => $animal['id'],
                            'created_by' => $this->session->userdata('id'),
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    } elseif ($animal['age'] < 18 && $animal['age'] >= 12) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal * 0.667,
                            'feed_date' => date('Y-m-d', strtotime($this->input->post('feed_date'))),
                            'feed_time' => $this->input->post('feed_time'),
                            'animal_id' => $animal['id'],
                            'created_by' => $this->session->userdata('id'),
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    } elseif ($animal['age'] < 12 && $animal['age'] >= 2) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal * 0.333,
                            'feed_date' => date('Y-m-d', strtotime($this->input->post('feed_date'))),
                            'feed_time' => $this->input->post('feed_time'),
                            'animal_id' => $animal['id'],
                            'created_by' => $this->session->userdata('id'),
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    }
                }
                $feed_info = $this->db->get_where('feed', array('id' => $feed_id))->row_array();
                $updated_feed_val = array(
                    'qty' => $feed_info['qty'] - $feed
                );
                $this->db->where('id', $feed_id);
                $this->db->update('feed', $updated_feed_val);

            }
            // Feed Calculation Per Animal According To Age

            $this->db->insert_batch('animal_daily_feeding', $animal_daily_feed);
            $this->db->trans_complete();
            // $total_affected_rows = $this->db->affected_rows();
// $first_insert_id = $this->db->insert_id();

// $last_id = ($first_insert_id + $total_affected_rows - 1);
// echo $first_insert_id;exit;
            //Acount Journal Table Entry Sttart Here
            // $query=$this->db->limit(1)->order_by('id','desc')->get('animal_daily_feeding');
            // $row=$query->row_array();
            // $lastID=$row['animal_id'];
         //         $params1 = array(
         //                'acc_number' => '501001',
         //                'item_id' =>0,
         //                'journal_details' =>'Feed Animal Entry',
         //                'journal_amount' =>'500',
         //                'type' =>'Feed Animal'
         //            );
         // $this->db->insert('account_journal', $params1);
         // $lastJournalID= $this->db->insert_id();
         //  $updateParam = array(
         //                'ref_id' => $lastJournalID
         //            );


         //  $this->db->where('journal_id', $lastJournalID);
         // $this->db->update('account_journal', $updateParam);

         //   $params2 = array(
         //                'ref_id' => $lastJournalID,
         //                'acc_number' => '105001',
         //                'item_id' =>0,
         //                'journal_details' =>'Feed Animal Entry',
         //                'journal_amount' =>'-500',
         //                'type' =>'Feed Animal'
         //            );
         //    $this->db->insert('account_journal', $params2);
//aCCOUNT jOURNAL entry End Here

            $this->session->set_flashdata('success', $total_animals_to_feed . '&nbsp;Animals Feeded Successfully');
            redirect('animals');
        } else {
            $this->session->set_flashdata('error', validation_errors('<span class="error">', '</span>'));
            redirect('animals');
        }
    }

    function add_yeild()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('milk_qty', 'Mil Quantity', 'required|numeric');
        if ($this->form_validation->run()) {
            $params = array(
                'qty' => $this->input->post('milk_qty'),
                'date' => date('Y-m-d', strtotime($this->input->post('milking_date'))),
                'animal_id' => $this->input->post('animal_id'),
                'routine' => $this->input->post('routine'),
                'approx_exac' => $this->input->post('yelid'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm')
            );
            $check_yeild_where =  array(
                'animal_id' => $this->input->post('animal_id'),
                'farm_id' => $this->session->userdata('active_farm'),
                'date' => date('Y-m-d', strtotime($this->input->post('milking_date'))),
                'routine' => $this->input->post('routine')
            );
            $has_yeild = $this->db->get_where('milk_yeild', $check_yeild_where)->row_array();


            if (!$has_yeild) {
                $farm = $this->db->get_where('farm', array('id' => $this->session->userdata('active_farm')))->row_array();
                $new_yeild = array(
                    'available_milk_qty' => $farm['available_milk_qty'] + $this->input->post('milk_qty')
                );
                $this->load->model('Farm_model');
                $this->db->trans_start();
                $this->Farm_model->update_farm($this->session->userdata('active_farm'), $new_yeild);
                $this->db->insert('milk_yeild', $params);
                $this->db->trans_complete();
                $this->session->set_flashdata('success', 'Yeild Added Successfully');
            } else {
                $this->session->set_flashdata('error', 'Animal Already Yeilded');
            }
            redirect('animals');
        } else {
            $this->session->set_flashdata('error', validation_errors('<span class="error">', '</span>'));
            redirect('animals');
        }
    }


    function add_yeild_bulk()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('bm_milk_qty', 'Milk Quantity', 'required|numeric');
        $this->form_validation->set_rules('bm_milking_date', 'Milking Date', 'required');
        $this->form_validation->set_rules('bm_animal_type', 'Animal Type', 'required');
        if ($this->form_validation->run()) {
            $where = array(
                'animal_type' => $this->input->post('bm_animal_type'),
                'farm_id' => $this->session->userdata('active_farm'),
                'sex' => FEMALE,
                'status' => ACTIVE
            );
            $animals = $this->db->get_where('animals', $where)->result_array();

            $skipped_animals = 0;
            foreach ($animals as $key => $value) {
                $check_yeild_where =  array(
                    'animal_id' => $value['id'],
                    'farm_id' => $this->session->userdata('active_farm'),
                    'date' => date('Y-m-d', strtotime($this->input->post('bm_milking_date'))),
                    'routine' => $this->input->post('bm_routine')
                );
                $has_yeild = $this->db->get_where('milk_yeild', $check_yeild_where)->row_array();
                if ($has_yeild) {
                    $skipped_animals++;
                } else {
                    $params[] = array(
                        'qty' => 0, // Keep it zero for now, will replace after finiding exacted milked animals
                        'date' => date('Y-m-d', strtotime($this->input->post('bm_milking_date'))),
                        'animal_id' => $value['id'],
                        'routine' => $this->input->post('bm_routine'),
                        'approx_exac' => $this->input->post('bm_yelid'),
                        'created_by' => $this->session->userdata('id'),
                        'farm_id' => $this->session->userdata('active_farm')
                    );
                }
            }
            $milkable_animals = count($animals) - $skipped_animals;
            if ($milkable_animals != 0) {
                $avg_milk_yeild = $this->input->post('bm_milk_qty') / $milkable_animals;
                foreach ($params as $key => $value) {
                    $params[$key]['qty'] = $avg_milk_yeild;
                }
            }


            $farm = $this->db->get_where('farm', array('id' => $this->session->userdata('active_farm')))->row_array();
            $new_yeild = array(
                'available_milk_qty' => $farm['available_milk_qty'] + $this->input->post('milk_qty')
            );

            $this->load->model('Farm_model');
            $this->db->trans_start();
            //echo $milkable_animals;exit;
            if ($milkable_animals != 0) {

                $this->Farm_model->update_farm($this->session->userdata('active_farm'), $new_yeild);
                $this->db->insert_batch('milk_yeild', $params);

                  // Acount Journal Table Entry Sttart Here
                     $params1 = array(
                        'acc_number' => '105001',
                        'item_id' =>0,
                        'journal_details' =>'Bulk Milking Animals Entry',
                        'journal_amount' =>'500',
                        'type' =>'Feed Animal'
                    );
         $this->db->insert('account_journal', $params1);
         $lastJournalID= $this->db->insert_id();
          $updateParam = array(
                        'ref_id' => $lastJournalID
                    );


          $this->db->where('journal_id', $lastJournalID);
         $this->db->update('account_journal', $updateParam);

           $params2 = array(
                        'ref_id' => $lastJournalID,
                        'acc_number' => '701001',
                        'item_id' =>0,
                        'journal_details' =>'Bulk Milking Animals Entry',
                        'journal_amount' =>'-500',
                        'type' =>'Feed Animal'
                    );
            $this->db->insert('account_journal', $params2);
        // ACCOUNT jOURNAL entry End Here    

                        }
            $this->db->trans_complete();
            if ($skipped_animals == 0) {
                $this->session->set_flashdata('success', 'Yeild Added Successfully');
            } else if ($milkable_animals == 0) {
                $this->session->set_flashdata('error', 'No Yeild Added , There Were No Yeildable Animals Found');
            } else {
                $this->session->set_flashdata('success', 'Yeild Added Successfully, ' . $skipped_animals . ' Animals Skipped - They Were Already Yeilded');
            }
            redirect('animals');
        } else {
            $this->session->set_flashdata('error', validation_errors('<span class="error">', '</span>'));
            redirect('animals');
        }
    }

    function get_animal_by_animaltype_id_male($animal_type)
    {
        $data = $this->Animals_model->animal_by_animaltype_id($animal_type);
        echo "<option value=''>Select Father</option>";
        foreach ($data['male'] as $d) {
            echo "<option value='" . $d['id'] . "'>" . $d['animals_name'] . "</option>";
        }
    }

    function get_animal_by_animaltype_id_female($animal_type)
    {
        $data = $this->Animals_model->animal_by_animaltype_id($animal_type);
        echo "<option value=''>Select Mother</option>";
        foreach ($data['female'] as $d) {
            echo "<option value='" . $d['id'] . "'>" . $d['animals_name'] . "</option>";
        }
    }


    function get_breed_by_animaltype_id($animal_type)
    {
        $data = $this->Animals_model->breed_by_animaltype_id($animal_type);
        echo "<option value=''>Select Breed</option>";
        foreach ($data as $d) {
            echo "<option value='" . $d['id'] . "'>" . $d['breed_name'] . "</option>";
        }
    }
    function get_breed_by_animaltype_id_import($animal_type)
    {
        $data = $this->Animals_model->breed_by_animaltype_id($animal_type);
        echo "<option value=''>Select Breed</option>";
        foreach ($data as $d) {
            echo "<option value='" . $d['id'] . "'>" . $d['breed_name'] . "</option>";
        }
    }

    function get_milking_history($animal_id)
    {
        $columns = array(
            0 => 'date',
            1 => 'qty',
            2 => 'approx_exac',
            3 => 'routine',
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Animals_model->get_all_milking_history_count($animal_id);

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Animals_model->get_all_milking_history($limit, $start, $order, $dir, $animal_id);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Animals_model->animals_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Animals_model->animals_search_count($search);
        }
        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {

                if ($post->routine == MILKING_ROUTINE_EVENING) {
                    $routine = 'Evening';
                } else if ($post->routine == MILKING_ROUTINE_MORNING) {
                    $routine = 'Morning';
                } else if ($post->routine == MILKING_ROUTINE_AFTERNOON) {
                    $routine = 'Afternoon';
                }


                $nestedData['date'] = date('d M,Y', strtotime($post->date));
                $nestedData['qty'] = $post->qty;
                $nestedData['approx_exac'] = ($post->approx_exac == MILK_YEILD_APPROX) ? "Approx" : "Exact";
                $nestedData['routine'] = $routine;
                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    function get_weight_history($animal_id)
    {
        $columns = array(
            0 => 'date',
            1 => 'weight'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Animals_model->get_all_weight_history_count($animal_id);

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Animals_model->get_all_weight_history($limit, $start, $order, $dir, $animal_id);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Animals_model->animals_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Animals_model->animals_search_count($search);
        }
        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {


                $nestedData['date'] = date('d M,Y', strtotime($post->date));
                $nestedData['weight'] = $post->weight;
                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    function get_vaccination_history($animal_id)
    {
        $columns = array(
            0 => 'vaccine_date',
            1 => 'animal',
            2 => 'vaccine',
            3 => 'next_vaccine'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Animals_model->get_all_vaccine_history_count($animal_id);

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Animals_model->get_all_vaccine_history($limit, $start, $order, $dir, $animal_id);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Animals_model->animals_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Animals_model->animals_search_count($search);
        }
        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {

                if ($post->next_vaccine == null || $post->next_vaccine == "0000-00-00") {
                    $vaccine_btn = "";
                    $next_vccn = "<span class='badge badge-info'>Not Required</span>";
                } else {
                    if ($post->next_taken == 0) {
                        $next_vccn = date('d M,Y', strtotime($post->next_vaccine));
                        $vaccine_btn = "<button class='btn btn-dark btn-sm waves-effect waves-light' data-toggle='modal' data-target='.bs-vaccination-modal-sm' onclick='get_animals_for_vaccine(" . $post->animal_id . ", " . $post->id . ")' ><i class='uil-syringe'></i> Vaccination</button>";
                    } else {
                        $next_vccn = date('d M,Y', strtotime($post->next_vaccine)) . "&nbsp;&nbsp;<span class='badge badge-success'>Vaccinated</span>";
                        $vaccine_btn = "";
                    }
                }

                $nestedData['animal'] = $post->name . " (" . $post->code . ")";
                $nestedData['vaccine_date'] = date('d M,Y', strtotime($post->vaccine_date));
                $nestedData['next_vaccine'] = $next_vccn;
                $nestedData['actions'] = $vaccine_btn;
                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }
    function get_list()
    {
        $columns = array(
            0 => 'a.code',
            1 => 'a.name',
            2 => 'a.dob',
            3 => 'breed.breed_name',
            4 => 'animal_type.type_of_animal',
            5 => 'a.sex',
            6 => '',
            7 => '',
            8 => 'a.status',
            9 => 'a.id',
            10 => 'a.dop',
            11 => 'a.father_id',
            12 => 'a.mother_id',
            13 => 'a.weight',
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end

        //$todayYeild="";
        $totalData = $this->Animals_model->get_all_animals_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Animals_model->get_all_animals($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Animals_model->animals_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Animals_model->animals_search_count($search);
        }
        
        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                if ($post->sex == MALE) {
                    $sex = "MALE";
                    $yeildbtn = "";
                } else {
                    $sex = "FEMALE";
                    if ($post->status == ACTIVE) {
                        $yeildbtn = "<button class='btn btn-info btn-sm waves-effect waves-light' data-toggle='modal' data-target='.bs-example-modal-sm' onclick='fcidim(" . $post->id . ")' ><i class='uil-water-glass'></i> Milk</button>";
                    } else {
                        $yeildbtn = "";
                    }
                }
                $todayYeild = $this->get_today_yeild($post->id);
                if ($todayYeild) {
                    $todayYeild = "<button type='button' class='btn btn-info btn-sm animalYeild' data-toggle='modal' data-code=".$post->id." data-target='#myModal'>". $todayYeild . "</button>";
                    //$todayYeild = "<span class='badge badge-info todayYield'>" . $todayYeild . "</span>";
                } else {
                    $todayYeild = "<span class='badge badge-warning'>Not Available</span>";
                }

                $yesterdayYeild = $this->get_yesterday_yeild($post->id);
                if ($yesterdayYeild) {
                    $yesterdayYeild = "<span class='badge badge-info'>" . $yesterdayYeild . "</span>";
                } else {
                    $yesterdayYeild = "<span class='badge badge-warning'>Not Available</span>";
                }

                if ($post->status == ACTIVE) {
                    if ($post->sex == MALE) {
                        $status = '<span class="badge badge-pill badge-primary">Male</span>';
                    } else {
                        $status = '<span class="badge badge-pill badge-primary">MILKING</span>';
                    }
                    
                } else if ($post->status == SUSPENDED) {
                    $status = '<span class="badge badge-pill badge-dark">INACTIVE</span>';
                } else if ($post->status == PREGNENT) {
                    $status = '<span class="badge badge-pill badge-success">PREGNENT</span>';
                } else if ($post->status == HEIFER) {
                    $status = '<span class="badge badge-pill badge-warning">HEIFER</span>';
                } else if ($post->status == QUARANTINE) {
                    $now = time(); // or your date as well
                    $your_date = strtotime($post->date_created);
                    $datediff = $now - $your_date;
                    $days_passed =  round($datediff / (60 * 60 * 24));
                    $days_left = intval($post->quarantine_period) - intval($days_passed);

                    if ($days_left <= 1) {
                        $unquarantine = "<br> <a href='" . base_url('animals/move_to_milking/' . $post->id) . "' class='btn btn-success btn-sm waves-effect waves-warning'>Move To Milking</a>";
                    } else {
                        $unquarantine = "";
                    }
                    $status = '<span class="badge badge-pill badge-danger">QUARANTINED</span><br>' . $days_left . ' Days Left' . $unquarantine;
                } else if ($post->status == DISEASED) {
                    $status = '<span class="badge badge-pill badge-dark">DISEASES</span>';
                }


                $nestedData['name'] = $post->name;
                $nestedData['code'] = "<img class='img-thumbnailx' src='" . base_url('assets/images/animals/' . $post->avatar) . "' onerror='imgError(this);''> <br>" . $post->code;
                $nestedData['yes_yeild'] = $yesterdayYeild;
                $nestedData['today_yeild'] = $todayYeild;
                $nestedData['status'] = $status;

                $birthday = new DateTime($post->dob);
                $diff = $birthday->diff(new DateTime());
                $months = $diff->format('%m') + 12 * $diff->format('%y');

                $nestedData['dob'] = $months . "&nbsp;Months";
                $nestedData['dop'] = $post->dob;
                $nestedData['sex'] = $sex;
                $nestedData['animaltype'] = $post->type;
                $nestedData['breedid'] = $post->breed_name;
                $nestedData['fatherid'] = $post->father_name;
                $nestedData['motherid'] = $post->mother_name;
                // $nestedData['id'] = $post->id;
                $nestedData['weight'] = $post->weight . " (" . $post->symbol . ")";

                $view_profile_btn = "<a href='" . base_url('animals/view/' . base64_encode($post->id)) . "' class='btn btn-success btn-sm waves-effect waves-light'><i class='uil-eye'></i> ".$this->lang->line('view')."</a>&nbsp;";

                $nestedData['actions'] = $view_profile_btn . "<button class='btn btn-warning btn-sm waves-effect waves-light btn-edit' code='" . $post->id . "'><i class='uil-edit-alt'></i> ".$this->lang->line('edit')."</button>&nbsp;<button class='btn btn-danger delete-animal-btn btn-sm waves-effect waves-light' code='" . $post->id . "'><i class='uil-trash-alt'></i> ".$this->lang->line('delete')."</button>&nbsp;" . $yeildbtn;

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    function view($encoded_animal_id)
    {
        $animal_id = base64_decode($encoded_animal_id);
        $data['animal'] = $this->Animals_model->get_animal($animal_id);
        $data['_view'] = 'animals/view';
        $this->load->view('layouts/main', $data);
    }
    function move_to_milking($animal_id)
    {
        $params = array(
            'status' => ACTIVE
        );
        $this->Animals_model->update_animal($animal_id, $params);
        redirect('animals');
    }
    function get_vaccination_list()
    {
        $columns = array(
            0 => 'id',
            1 => 'vaccine_date',
            2 => 'next_vaccine',
            // 3 => 'id'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Animals_model->get_all_animals_vaccine_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Animals_model->get_all_animals_vaccine($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Animals_model->get_animals_vaccine_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Animals_model->get_animals_vaccine_search_count($search);
        }
        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                if ($post->next_vaccine == null || $post->next_vaccine == "0000-00-00") {
                    $vaccine_btn = "";
                    $next_vccn = "<span class='badge badge-info'>Not Required</span>";
                } else {
                    if ($post->next_taken == 0) {
                        $next_vccn = date('d M,Y', strtotime($post->next_vaccine));
                        $vaccine_btn = "<button class='btn btn-dark btn-sm waves-effect waves-light' data-toggle='modal' data-target='.bs-vaccination-modal-sm' onclick='get_animals_for_vaccine(" . $post->animal_id . ", " . $post->id . ")' ><i class='uil-syringe'></i> ".$this->lang->line('vaccination')."</button>";
                    } else {
                        $next_vccn = date('d M,Y', strtotime($post->next_vaccine)) . "&nbsp;&nbsp;<span class='badge badge-success'>".$this->lang->line('vaccinated')."</span>";
                        $vaccine_btn = "";
                    }
                }

                $nestedData['animal'] = $post->name . " (" . $post->code . ")";
                $nestedData['vaccine_date'] = date('d M,Y', strtotime($post->vaccine_date));
                $nestedData['next_vaccine_date'] = $next_vccn;
                $nestedData['actions'] = $vaccine_btn;

                // $nestedData['actions'] = "<button class='btn btn-warning btn-sm waves-effect waves-light'><i class='uil-edit-alt'></i> '".$this->lang->line('edit')."'</button>&nbsp;<button class='btn btn-danger btn-sm waves-effect waves-light'><i class='uil-trash-alt'></i> Delete</button>&nbsp;" . $yeildbtn;

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    function get_today_yeild($animal_id)
    {
        $this->db->select('SUM(milk_yeild.qty) as total_yeild');
        $wheret = array(
            'animal_id' => $animal_id,
            'farm_id' => $this->session->userdata('active_farm'),
            'date' => date('Y-m-d')
        );
        $data = $this->db->get_where('milk_yeild', $wheret)->row_array();
        return $data['total_yeild'];
    }

    function get_yesterday_yeild($animal_id)
    {
        $this->db->select('SUM(milk_yeild.qty) as total_yeild');
        $wherey = array(
            'animal_id' => $animal_id,
            'farm_id' => $this->session->userdata('active_farm'),
            'date' => date("Y-m-d", strtotime("yesterday"))
        );
        $data =  $this->db->get_where('milk_yeild', $wherey)->row_array();
        return $data['total_yeild'];
    }

    function pregnancy()
    {

        $this->load->library('form_validation');
        $this->form_validation->set_rules('motherid', 'Mother', 'required');
        $this->form_validation->set_rules('pregnancy_date', 'Date', 'required');
        $this->form_validation->set_rules('pregneny_type', 'Pregnancy Type', 'required');
        if ($this->form_validation->run()) {
            // Left is database column name, right side is value posted from form
            $cat_info = $this->db->get_where('animal_type', array('id' => $this->input->post('animaltypeid')))->row_array();
            $params = array(
                'date' => date('Y-m-d', strtotime($this->input->post('pregnancy_date'))),
                'expected_delivery_date' => date('Y-m-d', strtotime("+" . intval($cat_info['pregnancy_period']) . " months", strtotime($this->input->post('pregnancy_date')))),
                'animal_id' => $this->input->post('motherid'),
                'pregneny_type' => $this->input->post('pregneny_type'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm'),
                'animal_type' => $this->input->post('animaltypeid')
            );

            if ($this->input->post('father_id')) {
                $params['father_id'] = $this->input->post('father_id');
            }

            if ($this->input->post('semen_id')) {
                $params['semen_id'] = $this->input->post('semen_id');
                $product = $this->db->get_where('product', array('id' => $this->input->post('semen_id')))->row_array();
                $new_qty = array(
                    'stock_unit' => $product['stock_unit'] - 1
                );
            }

            $pregstatus = array(
                'status' => PREGNENT
            );
            $this->db->trans_start();
            if ($this->input->post('semen_id')) {
                $this->db->where('id', $product['id']);
                $this->db->update('product', $new_qty);
            }
            $this->Animals_model->update_animal($this->input->post('motherid'), $pregstatus);
            $this->db->insert('animal_pregnancy', $params);
            $this->db->trans_complete();
            $this->session->set_flashdata('success', 'Animal pregnancy added successfuly');
            redirect('animals/pregnancy');
        } else {
            $this->load->model('Animaltype_model');
            $data['animaltypeid'] = $this->Animaltype_model->get_animaltype_for_dd();

            $data['pregnanat_animals'] = $this->Animals_model->get_all_pregnant_animals();
            $data['code'] = $this->Animals_model->get_code();
            $data['_view'] = 'animals/pregnancy';

            $this->load->view('layouts/main', $data);
        }
    }

    function get_product_list_for_dd()
    {
        $this->db->where('farm_id', $this->session->userdata('active_farm'));
        $this->db->where('stock_unit >', 0);
        $data = $this->db->get('product')->result_array();
        echo "<option value=''>Select Vaccine</option>";
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['product_name'] . "</option>";
        }
    }

    function get_animals_for_vaccine()
    {
        $this->db->select('animals.id, animals.name, animals.code');
        $this->db->where('farm_id', $this->session->userdata('active_farm'));
        $status = DISEASED.",".SUSPENDED;
        $this->db->where_not_in('status', $status);
        // $this->db->where('status !=', DISEASED);
        // $this->db->or_where('status !=', SUSPENDED);
        $data = $this->db->get('animals')->result_array();
        //print_r($this->db->last_query()); exit;
        echo "<option value=''>Select Animal</option>";
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['name'] . " (" . $value['code'] . ")</option>";
        }
    }

    function vaccination()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('vaccine_animal', 'Animal', 'required');
        $this->form_validation->set_rules('vaccine_date', 'Vaccine Date', 'required');
        if ($this->form_validation->run()) {
            $params = array(
                'vaccine_date' => date('Y-m-d', strtotime($this->input->post('vaccine_date'))),
                'animal_id' => $this->input->post('vaccine_animal'),
                'vaccine_id' => $this->input->post('vaccine_id'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm')
            );

            if ($this->input->post('next_vaccine_date')) {
                $params['next_vaccine'] = date('Y-m-d', strtotime($this->input->post('next_vaccine_date')));
            }
            $product = $this->db->get_where('product', array('id' => $this->input->post('vaccine_id')))->row_array();
            $new_qty = array(
                'stock_unit' => $product['stock_unit'] - 1
            );
            $this->db->trans_start();
            if ($this->input->post('table_id')) {
                $vaccine_status = array(
                    'next_taken' => 1
                );
                $this->db->where('id', $this->input->post('table_id'));
                $this->db->update('animal_vaccine', $vaccine_status);
            }

            $this->db->where('id', $product['id']);
            $this->db->update('product', $new_qty);
            $this->db->insert('animal_vaccine', $params);
            $this->db->trans_complete();
                   // Acount Journal Table Entry Sttart Here
                     $params1 = array(
                        'acc_number' => '502001',
                        'item_id' =>0,
                        'journal_details' =>'Animal Vaccination Entry',
                        'journal_amount' =>'900',
                        'type' =>'Vaccine'
                    );
         $this->db->insert('account_journal', $params1);
         $lastJournalID= $this->db->insert_id();
          $updateParam = array(
                        'ref_id' => $lastJournalID
                    );


          $this->db->where('journal_id', $lastJournalID);
         $this->db->update('account_journal', $updateParam);

           $params2 = array(
                        'ref_id' => $lastJournalID,
                        'acc_number' => '105001',
                        'item_id' =>0,
                        'journal_details' =>'Animal Vaccination Entry',
                        'journal_amount' =>'-900',
                        'type' =>'Vaccine'
                    );
            $this->db->insert('account_journal', $params2);
        // ACCOUNT jOURNAL entry End Here    
            $this->session->set_flashdata('success', 'Animal Vaccinatied Successfuly');
            redirect('animals/pregnancy');
        } else {
            $this->load->model('Animaltype_model');
            $data['animaltypeid'] = $this->Animaltype_model->get_animaltype_for_dd();

            $data['pregnanat_animals'] = $this->Animals_model->get_all_pregnant_animals();
            $data['code'] = $this->Animals_model->get_code();
            $data['_view'] = 'animals/pregnancy';

            $this->load->view('layouts/main', $data);
        }
    }


    function get_mothers($animal_type_id)
    {
        $data = $this->Animals_model->get_animals_eligible_for_pregnancy($animal_type_id);
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['name'] . " (" . $value['code'] . ")</option>";
        }
    }
    function get_fathers()
    {
        $data = $this->Animals_model->get_fathers();
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['name'] . " (" . $value['code'] . ") ( Age: " . $value['age'] . " Months )</option>";
        }
    }


    function delete_animal($id)
    {
        if ($this->Animals_model->delete_animal($id)) {
            $this->session->set_flashdata('success', 'animal deleted successfully');
            echo true;
        } else {
            echo false;
        }
    }

    function get_animal($id)
    {
        echo json_encode($this->Animals_model->get_animal_data($id));
    }

    function yield_animals_milking()
    {
     $id=$this->input->post('id');
     $this->Animals_model->yield_animals_milking($id); 
    }
    function update_yield_animals_milking()
    {
        $id=$this->input->post('id');
        $date=date('Y-m-d');
        $animal_ids=$this->input->post('animal_ids');
        // $this->db->where('animal_id', $id);
        // $this->db->where('date', $date);
        // $this->db->delete('milk_yeild'); 
        // var_dump($animal_ids);exit;
          $data = array(
            
            'farm_id'     => $this->input->post('farm_id'),
            'animal_id'     => $this->input->post('animal_ids'),
            'qty'     => $this->input->post('animlal_yeild_qty'),
            'date'     => $date,
            'approx_exac'     => $this->input->post('approx_exac'),
            'routine'     => $this->input->post('routine'),
            'created_by'     => $this->input->post('created_by'),
            'date_created'     => $this->input->post('date_created'),
        ); 
     
      
        $this->Animals_model->update_yield_animals_milking($id,$data);
    }
}
