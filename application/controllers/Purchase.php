<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Purchase extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Purchase_model');
    }

    function po()
    {
        $data['_view'] = 'purchase/po';
        $this->load->view('layouts/main', $data);
    }

    function invoice()
    {
        $data['_view'] = 'purchase/invoice';
        $this->load->view('layouts/main', $data);
    }

    function newpo()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('supplier_id', 'Supplier Info', 'required');
        $this->form_validation->set_rules('date', 'Purchase Order Date', 'required');

        if ($this->form_validation->run()) {

            $params = array(
                'supplier_id' => $this->input->post('supplier_id'),
                'date' => date('Y-m-d', strtotime($this->input->post('date'))),
                'order_no' => $this->input->post('receipNumber'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm'),
                'tax_per' => 0,
                'gross_tot' => $this->input->post('net_total'),
                'net_tot' => $this->input->post('net_total')
            );
            $this->db->insert('purchase_orders', $params);
              $po_id = $this->db->insert_id();
            foreach ($_POST['products'] as $key => $value) {
                $podetails[] = array(
                    'po_id' => $po_id,
                    'product_id' => $value,
                    'uom' => $_POST['uom'][$value],
                    'qty' => $_POST['qty'][$value],
                    'rate' => $_POST['rate'][$value],
                    'amount' => $_POST['rate'][$value] * $_POST['qty'][$value],
                    'farm_id' => $this->session->userdata('active_farm')
                );
            }

            $this->db->insert_batch('po_details', $podetails);

            $this->session->set_flashdata('success', 'Purchase Order Generated Successfully!');
            redirect('purchase/po');
        } else {
            $this->load->model('Parties_model');
            $this->load->model('Product_model');
            $data['suppliers'] = $this->Parties_model->get_all_suppliers();
            $data['order_no'] = $this->Parties_model->get_code();
            $data['units'] = $this->Parties_model->get_all_units();
            $data['item_uom'] = $this->db->get('item_uom')->result_array();
            $data['products'] = $this->Product_model->get_pros_for_dd();
            $data['_view'] = 'purchase/newpo';
            $this->load->view('layouts/main', $data);
        }
    }

    function get_po_list()
    {
        $columns = array(
            0 => 'order_no',
            1 => 'date',
            2 => 'supplier_id',
            3 => 'tax_per',
            4 => 'net_tot',
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Purchase_model->get_all_po_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Purchase_model->get_all_po($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Purchase_model->po_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Purchase_model->po_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['po_no'] = $post->order_no;
                $nestedData['date'] = $post->date;
                $nestedData['supplier'] = $post->party_name . "(" . $post->party_code . ")";
                $nestedData['tax_per'] = $post->tax_per;
                $nestedData['net_total'] = $post->net_tot;

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }
    function get_pi_list()
    {
        $columns = array(
            0 => 'purchase_invoices.invoice_no',
            1 => 'purchase_orders.order_no',
            2 => 'purchase_invoices.date',
            3 => 'purchase_invoices.supplier_id',
            4 => 'purchase_invoices.tax_per',
            5 => 'purchase_invoices.net_tot',
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Purchase_model->get_all_pi_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Purchase_model->get_all_pi($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Purchase_model->pi_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Purchase_model->pi_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['invoice_no'] = $post->invoice_no;
                $nestedData['po_no'] = $post->order_no;
                $nestedData['date'] = $post->date;
                $nestedData['supplier'] = $post->party_name . "(" . $post->party_code . ")";
                $nestedData['tax_per'] = $post->tax_per;
                $nestedData['net_total'] = $post->net_tot;

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }
    function newinvoice()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('po_id', 'Purchase Order', 'required');
        $this->form_validation->set_rules('date', 'Invoice Date', 'required');

        if ($this->form_validation->run()) {

            $params = array(
                'po_id' => $this->input->post('po_id'),
                'invoice_type' => $this->input->post('invoice_type'),
                'date' => date('Y-m-d', strtotime($this->input->post('date'))),
                'invoice_no' => $this->input->post('invoice_no'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm'),
                'tax_per' => 0,
                'gross_tot' => $this->input->post('net_total'),
                'net_tot' => $this->input->post('net_total')
            );
            $this->db->insert('purchase_invoices', $params);
            $pi_id = $this->db->insert_id();
                        $params1 = array(
                        'acc_number' => '105001',
                        'item_id' =>0,
                        'journal_details' =>'Purchase Invoice Entry',
                        'journal_amount' =>$this->input->post('net_total'),
                        'type' =>'Purchase Invoice'
                    );
         $this->db->insert('account_journal', $params1);
         $lastJournalID= $this->db->insert_id();
          $updateParam = array(
                        'ref_id' => $lastJournalID
                    );


          $this->db->where('journal_id', $lastJournalID);
         $this->db->update('account_journal', $updateParam);

           $params2 = array(
                        'ref_id' => $lastJournalID,
                        'acc_number' => '201001',
                        'item_id' =>0,
                        'journal_details' =>'Purchase Invoice Entry',
                        'journal_amount' =>-1*$this->input->post('net_total'),
                        'type' =>'Purchase Invoice'
                    );
            $this->db->insert('account_journal', $params2); 
            foreach ($_POST['products'] as $key => $value) {
                $pidetails[] = array(
                    'pi_id' => $pi_id,
                    'product_id' => $value,
                    'uom' => $_POST['uom'][$value],
                    'qty' => $_POST['qty'][$value],
                    'rate' => $_POST['rate'][$value],
                    'amount' => $_POST['rate'][$value] * $_POST['qty'][$value],
                    'farm_id' => $this->session->userdata('active_farm')
                );

                $stockDetails[] = array(
                    'invoice_id' => $pi_id,
                    'invoice_type'=> PURCHASE_STOCKS,
                    'item_id'=> $value,
                    'quantity'=> $_POST['qty'][$value],
                    'created_by' => $this->session->userdata('id'),
                    'farm_id' => $this->session->userdata('active_farm')
                );


                $item_avgCost = $this->Purchase_model->get_item_avg_cost($value);
                $averageAmount = $item_avgCost['amount'] + ($_POST['rate'][$value] * $_POST['qty'][$value]);
                $averageQty = $item_avgCost['qty'] + $_POST['qty'][$value];
                $AvgCost = $averageAmount/$averageQty;
                $data = array(
                        'purchase_price' => $_POST['rate'][$value],
                        'avg_cost' => $AvgCost
                );

                $this->db->where('id', $value);
                $this->db->update('product', $data);
            }

            $this->db->insert_batch('pi_details', $pidetails);
            $this->db->insert_batch('stocks', $stockDetails);

            $this->session->set_flashdata('success', 'Purchase Invoice Created Successfully!');
            redirect('purchase/invoice');
        } else {
            $this->load->model('Parties_model');
            $this->load->model('Product_model');
            $data['pos'] = $this->Purchase_model->get_all_pos_dd();
            $data['order_no'] = $this->Parties_model->get_code_pi();
            $data['units'] = $this->Parties_model->get_all_units();
            $data['products'] = $this->Product_model->get_pros_for_dd();
            $data['suppliers'] = $this->Parties_model->get_all_suppliers();
            $data['_view'] = 'purchase/newinvoice';
            $this->load->view('layouts/main', $data);
        }
    }

    function get_po_details($po_id)
    {
        $data = $this->Purchase_model->get_po_details($po_id);
        echo json_encode($data);
    }

    function get_supplier_invoices($supplier_id)
    {
        
        $data = $this->Purchase_model->get_supplier_invoices($supplier_id);
        //print_r($data); exit;
        echo "<option value=''>Select Supplier</option>";
        foreach ($data as $pro) {
            echo "<option value='" . $pro['id'] . "'>" . $pro['order_no'] . "( " . $pro['date'] . " )" . "</option>";
        }
    }

    function pv()
    {
        $data['_view'] = 'purchase/pv';
        $this->load->view('layouts/main', $data);
    }

    function newpv()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('supplier_id', 'Customer', 'required');
        $this->form_validation->set_rules('date', 'RV Date', 'required');
        $this->form_validation->set_rules('amount', 'Amount', 'required');
        $this->form_validation->set_rules('invoice_id', 'Invoice', 'required');
        $this->form_validation->set_rules('payment_mode', 'Payment Mode', 'required');

        if ($this->form_validation->run()) {

            $params = array(
                'supplier_id' => $this->input->post('supplier_id'),
                'date' => date('Y-m-d', strtotime($this->input->post('date'))),
                'amount' => $this->input->post('amount'),
                'payment_mode' => $this->input->post('payment_mode'),
                'pi_id' => $this->input->post('invoice_id'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm')
            );
            $this->db->insert('payment_voucher', $params);
            $si_id = $this->db->insert_id();
                  $params1 = array(
                        'acc_number' => '201001',
                        'item_id' =>0,
                        'journal_details' =>'Purchase Voucher Entry',
                        'journal_amount' =>$this->input->post('amount'),
                        'type' =>'Purchase Voucher'
                    );
         $this->db->insert('account_journal', $params1);
         $lastJournalID= $this->db->insert_id();
          $updateParam = array(
                        'ref_id' => $lastJournalID
                    );


          $this->db->where('journal_id', $lastJournalID);
         $this->db->update('account_journal', $updateParam);

           $params2 = array(
                        'ref_id' => $lastJournalID,
                        'acc_number' => '104002',
                        'item_id' =>0,
                        'journal_details' =>'Purchase Voucher Entry',
                        'journal_amount' =>-1*$this->input->post('amount'),
                        'type' =>'Purchase Voucher'
                    );
            $this->db->insert('account_journal', $params2); 

            $this->session->set_flashdata('success', 'Payment Voucher Created Successfully!');
            redirect('sale/rv');
        } else {
            $this->load->model('Parties_model');
            $data['supliers'] = $this->Parties_model->get_all_suppliers();
            $data['pis'] = $this->Purchase_model->get_all_invoices_dd();
            $data['_view'] = 'purchase/newpv';
            $this->load->view('layouts/main', $data);
        }
    }

    function get_pv_list()
    {
        $columns = array(
            0 => 'payment_voucher.date',
            1 => 'payment_voucher.customer_id',
            2 => 'payment_voucher.amount',
            3 => 'payment_voucher.si_id',
            4 => 'payment_voucher.payment_mode',
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end
        
        $totalData = $this->Purchase_model->get_all_pv_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Purchase_model->get_all_pv($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Purchase_model->get_pv_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Purchase_model->get_pv_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                if ($post->payment_mode == PM_CASH) {
                    $pm = "<span class='badge badge-primary'>Cash</span>";
                } else if ($post->payment_mode == PM_BANKTRANSFER) {
                    $pm = "<span class='badge badge-info'>Bank Transfer</span>";
                }
                $nestedData['date'] = $post->date;
                $nestedData['invoice'] = $post->invoice_no . " (Pkr " . number_format($post->net_tot, 2, '.', ',') . "/-)";
                $nestedData['amount'] = number_format($post->amount, 2, '.', ',');
                $nestedData['supplier'] = $post->party_name . " (" . $post->party_code . ")";
                $nestedData['payment_mode'] = $pm;

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }
}
