<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
class Finance extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Finance_model');
        //$this->load->library('excel');
    }

     function index()
    {
    	 if ($this->input->method(true) == 'POST') {
    	 	// echo "work";exit;
            $this->load->library('form_validation');
              # New Insert
                $this->form_validation->set_rules('accountType', 'Account Type', 'required');
                $this->form_validation->set_rules('account_name', 'Account Name', 'required');
                $this->form_validation->set_rules('account_no', 'Account No', 'required');
             if ($this->form_validation->run()) {
             	// echo "Fixed";exit;
                    $params = array(
                        'acc_type_id' => $this->input->post('accountType'),
                        'acc_name' => $this->input->post('account_name'),
                        'acc_no' => $this->input->post('account_no'),
                        'created_by' => $this->session->userdata('id'),
                        'status' => ACTIVE
                    );
                   
                    $this->db->insert('account_chart', $params);
                    // $this->db->trans_complete();
                    $this->session->set_flashdata('success', 'Account added successfuly');
                    redirect('Finance');
                }    
        }
    	$data['accountType'] = $this->Finance_model->get_all_AccountType();
    	 $data['_view'] = 'finance/index';
    	
            $this->load->view('layouts/main', $data);
    }
     function get_finance()
    {
    	$columns = array(
            0 => 'account_type',
            1 => 'account_name',
            2 => 'account_no',
            3 => 'status',
            4 => 'id'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Finance_model->get_all_account_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Finance_model->get_all_account($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Finance_model->account_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Finance_model->account_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['account_type'] = $post->account_type;
                $nestedData['account_name'] = $post->acc_name;
                $nestedData['account_no'] = $post->acc_no;
                $nestedData['status'] = ($post->status == ACTIVE) ? "<button class='btn btn-warning btn-sm btn-status' code='" . $post->acc_id . "' data-status='".$post->status."'>Suspend</button>" : "<button class='btn btn-success btn-sm btn-status' code='" . $post->acc_id . "'>Active</button>";
                $nestedData['actions'] = "<button class='btn btn-warning btn-sm btn-edit' code='" . $post->acc_id . "'><i class='uil-edit-alt'></i> Edit</button>&nbsp;<button class='btn btn-danger btn-sm btn-delete' code='" . $post->acc_id . "'><i class='uil-trash-alt'></i> Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

     function updateStatus()
    {
    	$id=$this->input->post('id');
    	$status=$this->input->post('status');
    	if($status==1)
    	{
    	$params = array(
                'status' =>SUSPENDED 
            );	
    	}else{
    	$params = array(
                'status' =>ACTIVE 
            );	
    	}
    	 
    	echo $this->Finance_model->update_status($id,$params);	
    }

      public function delete_account($id)
    {
    	$params = array(
                'status' =>DELETED 
            );		
    	
    	 
    	echo $this->Finance_model->delete_account($id,$params);	
    }

    function UpdateAccount()
    {
    	$id= $this->input->post('id');
    	 $params = array(
                        'acc_type_id' => $this->input->post('type'),
                        'acc_name' => $this->input->post('name'),
                        'acc_no' => $this->input->post('no')
                    );
                   
                echo  $this->Finance_model->update_account($id,$params);
    }
}
?>