<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class City extends Admin_Controller
{
  
    function __construct()
    {
        parent::__construct();
        $this->load->model('City_model');
    }

    function index()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('name', 'city Name', 'required');
        $this->form_validation->set_rules('country_id', 'Country', 'required');
        $this->form_validation->set_rules('province_id', 'Province', 'required');

        if ($this->form_validation->run()) {
            // Left is database column name, right side is value posted from form
            $params = array(
                'name' => $this->input->post('name'),
                'country_id' => $this->input->post('country_id'),
                'province_id' => $this->input->post('province_id'),
               
                'created_by' => $this->session->userdata('id')
            );
            $this->City_model->add_city($params);
            $this->session->set_flashdata('success', 'City added successfuly');
            redirect('city');
        } else {
            $this->load->model('Country_model');
            $data['countries'] = $this->Country_model->get_all_country_for_dd();
            $data['_view'] = 'city/index';
            $this->load->view('layouts/main', $data);
        }
    }

    function get_province_by_country_id($country_id)
    {
        $this->load->model('Province_model');
        $data = $this->Province_model->province_by_country_id($country_id);
        echo '<option value="">Select Province</option>';
        foreach ($data as $d){
            echo "<option value='".$d['id']."'>".$d['province_name']."</option>";
        }
    }

    function get_city_by_province_id($city_id)
    {
        $this->load->model('Province_model');
        $data = $this->Province_model->city_by_province_id($city_id); 
        echo '<option value="">Select City</option>';
        foreach ($data as $d){
            echo "<option value='".$d['id']."'>".$d['city_name']."</option>";
        }
    }


    
    function get_list()
    {
        $columns = array(
            0 => 'name',
            1 => 'province',
            2 => 'id'       
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->City_model->get_all_city_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->City_model->get_all_city($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->City_model->city_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->City_model->city_search_count($search);
        }
        //left side is database side and right side is 
        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['name'] = $post->name;
                $nestedData['province'] = $post->province_name;
                $nestedData['actions'] = "<button class='btn btn-warning btn-xs btn-edit' code='".$post->id."' country='".$post->country_id."' province='".$post->province_id."'>Edit</button>&nbsp;<button class='btn btn-danger btn-xs btn-delete' code='".$post->id."'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }
    public function edit_country($id)
    {
        # code...
    }

    public function delete_city($id)
    {
        $this->City_model->delete_city($id);
        echo 1;
    }

    public function update_city($id)
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('name', 'city Name', 'required');
        $this->form_validation->set_rules('country_id', 'Country', 'required');
        $this->form_validation->set_rules('province_id', 'Province', 'required');
        
        if ($this->form_validation->run()) {
            $this->City_model->update_city($id,[

                    'name'=>$this->input->post('name'),
                'country_id'=>$this->input->post('country_id'),
                'province_id'=>$this->input->post('province_id'),

            ]);
            echo "1";
        } else {
            http_response_code(400);
            echo json_encode($this->form_validation->error_string(" "," "));
        }
        
        
    }
}
