<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Currency extends Admin_Controller{
    
    function __construct()
    {
        parent::__construct();
        $this->load->model('Currency_model');
    }

    
    function index()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('name', 'city Name', 'required');
        $this->form_validation->set_rules('symbol', 'symbol', 'required');
       

        if ($this->form_validation->run()) {
            // Left is database column name, right side is value posted from form
            $params = array(
                'name' => $this->input->post('name'),
                'symbol' => $this->input->post('symbol'),

               
                'created_by' => $this->session->userdata('id')
            );
           $this->Currency_model->add_currency($params);
            $this->session->set_flashdata('success', 'Currency added successfuly');
            redirect('currency');
        } else {
   
            $data['_view'] = 'currency/index';

            $this->load->view('layouts/main',$data);
        }
    }

    // function get_province_by_country_id($country_id)
    // {
    //     $this->load->model('Province_model');
    //     $data = $this->Province_model->province_by_country_id($country_id);
    //     foreach ($data as $d){
    //         echo "<option value='".$d['id']."'>".$d['province_name']."</option>";
    //     }
    // }



    
    function get_list()
    {
        $columns = array(
            0 => 'name',
            1 => 'symbol',
            2 => 'id'       
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Currency_model->get_all_currency_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Currency_model->get_all_currency($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Currency_model->currency_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Currency_model->currency_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['name'] = $post->name;
                $nestedData['symbol'] = $post->symbol;
                $nestedData['actions'] = "<button class='btn btn-warning btn-xs btn-edit' code='".$post->id."'>Edit</button>&nbsp;<button class='btn btn-danger btn-xs btn-delete' code='".$post->id."'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    public function delete_currency($id)
    {
        echo $this->Currency_model->delete_currency($id);
    }

    public function update_currency($id)
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('name', 'city Name', 'required');
        $this->form_validation->set_rules('symbol', 'symbol', 'required');

        if ($this->form_validation->run()) {
            $this->Currency_model->update_currency($id,[
                'name'=>$this->input->post('name'),
                'symbol'=>$this->input->post('symbol')
            ]);
            echo 1;
        }
    }

}
