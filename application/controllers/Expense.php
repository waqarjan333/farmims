<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Expense extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Expense_model');
    }

    function index()
    {
        $this->load->library('form_validation');


        if ($this->input->method(true) == 'POST') {
            if ($this->input->post('id')) {
                # Update Expense
                $this->form_validation->set_rules('ename', 'Name', 'required');
                $this->form_validation->set_rules('eexpense_cat_id', 'Category', 'required');
                $this->form_validation->set_rules('edate', 'Expense Date', 'required');
                $this->form_validation->set_rules('eamount', 'Amount', 'required|numeric');


                if ($this->form_validation->run()) {

                    $params = array(
                        'name' => $this->input->post('ename'),
                        'expense_cat_id' => $this->input->post('eexpense_cat_id'),
                        'date' => date('Y-m-d', strtotime($this->input->post('edate'))),
                        'amount' => $this->input->post('eamount')
                    );
                    $this->Expense_model->update_expense($this->input->post('id'),$params);
                    $this->session->set_flashdata('success', 'Expense Updated Successfuly');
                    redirect('expense');
                }

            } else {
                # Insert New  Expense
                $this->form_validation->set_rules('name', 'Name', 'required');
                $this->form_validation->set_rules('expense_cat_id', 'Category', 'required');
                $this->form_validation->set_rules('date', 'Expense Date', 'required');
                $this->form_validation->set_rules('amount', 'Amount', 'required|numeric');
                   $lastID=0; 

                if ($this->form_validation->run()) {
                    if($this->input->post('expense_type')=="land"){
                        $params = array(
                            'name' => $this->input->post('name'),
                            'land_type' => $this->input->post('type_of_land'),
                            'land_batch_no' => $this->input->post('land_batch'),
                            'land_area_no' => $this->input->post('land_area'),
                            'expense_cat_id' => $this->input->post('expense_cat_id'),
                            'date' => date('Y-m-d', strtotime($this->input->post('date'))),
                            'amount' => $this->input->post('amount'),
                            'created_by' => $this->session->userdata('id'),
                            'farm_id' => $this->session->userdata('active_farm'),
                            'status' => ACTIVE
                        );
                       $lastID=$this->Expense_model->add_land_expense($params);
                        $this->session->set_flashdata('success', 'Land Expense Added Successfuly');
                        // redirect('expense');
                    } else if($this->input->post('expense_type')=="other"){
                        $params = array(
                            'name' => $this->input->post('name'),
                            'expense_cat_id' => $this->input->post('expense_cat_id'),
                            'date' => date('Y-m-d', strtotime($this->input->post('date'))),
                            'amount' => $this->input->post('amount'),
                            'created_by' => $this->session->userdata('id'),
                            'farm_id' => $this->session->userdata('active_farm')
                        );
                        $lastID=$this->Expense_model->add_expense($params);
                        $this->session->set_flashdata('success', 'Expense Added Successfuly');
                        // redirect('expense');
                    }

                 $params1 = array(
                        'acc_number' => '601',
                        'item_id' =>$lastID,
                        'journal_details' =>'Expense Entry',
                        'journal_amount' =>$this->input->post('amount'),
                        'type' =>'Expense'
                    );
         $this->db->insert('account_journal', $params1);
         $lastJournalID= $this->db->insert_id();
          $updateParam = array(
                        'ref_id' => $lastJournalID
                    );


          $this->db->where('journal_id', $lastJournalID);
         $this->db->update('account_journal', $updateParam);

           $params2 = array(
                        'ref_id' => $lastJournalID,
                        'acc_number' => '105001',
                        'item_id' =>$lastID,
                        'journal_details' =>'Expense Entry',
                        'journal_amount' =>-1*$this->input->post('amount'),
                        'type' =>'Expense'
                    );
            $this->db->insert('account_journal', $params2);    
                }
            }
        }




        $this->load->model('Expensecategory_model');
        $this->load->model('LandManagementData_model');
        $data['landType'] = $this->LandManagementData_model->get_all_LandType_data('Land Type');
        $data['expense_category'] = $this->Expensecategory_model->get_expensecategory_for_dd();

        $data['_view'] = 'expense/index';

        $this->load->view('layouts/main', $data);
    }
    function land_expense(){

        $data['_view'] = 'expense/land_expense';

        $this->load->view('layouts/main', $data);
    }
    function get_land_list()
    {
        $columns = array(
            0 => 'land_expense.name',
            1 => 'expense_category.name',
            2 => 'land_type',
            3 => 'batch_no',
            4 => 'area_no',
            5 => 'land_expense.date',
            6 => 'land_expense.amount',
            7 => 'land_expense.id',
            8 => 'status',
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Expense_model->get_all_land_expense_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Expense_model->get_all_land_expense($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Expense_model->land_expense_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Expense_model->land_expense_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['name'] = $post->name;
                $nestedData['category'] = $post->expense_category;
                $nestedData['land_type'] = $post->land_type;
                $nestedData['batch_no'] = 'Batch No ( Inv #: '. $post->invoice .') => '. $post->batch_no;
                $nestedData['area_no'] = 'Area No '. $post->area_no;
                $nestedData['date'] = date('d M,Y', strtotime($post->date));
                $nestedData['amount'] = $post->amount;
                $nestedData['status'] = ($post->status == ACTIVE) ? "<button class='btn btn-warning btn-sm btn-status' code='" . $post->id . "' data-status='".$post->status."'>Suspended</button>" : "<button class='btn btn-success btn-sm btn-status' code='" . $post->id . "'>Active</button>";
                $nestedData['actions'] = "<a href='".base_url('expense/edit_landExpense/'.$post->id)."' class='btn btn-warning btn-sm btn-edit' code='" . $post->id . "'><i class='uil-edit-alt'></i> Edit</a>&nbsp;<button class='btn btn-danger btn-sm btn-delete' code='" . $post->id . "'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    function get_list()
    {
         $columns = array(
            0 => 'expense.name',
            1 => 'expense_category.name',
            2 => 'expense.date',
            3 => 'expense.amount',
            4 => 'expense.id',
            5 => 'status',
        );


        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Expense_model->get_all_expense_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Expense_model->get_all_expense($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Expense_model->expense_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Expense_model->expense_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['name'] = $post->name;
                $nestedData['category'] = $post->expense_category;
                $nestedData['date'] = date('d M,Y', strtotime($post->date));
                $nestedData['amount'] = $post->amount;
                 $nestedData['status'] = ($post->status == ACTIVE) ? "<button class='btn btn-warning btn-sm btn-status' code='" . $post->id . "' data-status='".$post->status."'>Suspended</button>" : "<button class='btn btn-success btn-sm btn-status' code='" . $post->id . "'>Active</button>";
                $nestedData['actions'] = "<button class='btn btn-warning btn-sm btn-edit' code='" . $post->id . "'><i class='uil-edit-alt'></i> Edit</button>&nbsp;<button class='btn btn-danger btn-sm btn-delete' code='" . $post->id . "'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    public function edit_country($id)
    {
        # code...
    }

    public function delete_expense($id)
    {
        echo $this->Expense_model->delete_expense($id);
    }
    public function delete_land_expense($id)
    {
        echo $this->Expense_model->delete_land_expense($id);
    }
        function updateStatus()
    {
        $id=$this->input->post('id');
        $status=$this->input->post('status');
        if($status==1)
        {
        $params = array(
                'status' =>SUSPENDED 
            );  
        }else{
        $params = array(
                'status' =>ACTIVE 
            );  
        }
         
        echo $this->Expense_model->update_status($id,$params); 
    }

    function edit_landExpense()
    {
        $editID=$this->uri->segment(3);
             $this->load->model('Expensecategory_model');
        $this->load->model('LandManagementData_model');
        $data['landType'] = $this->LandManagementData_model->get_all_LandType_data('Land Type');
        $data['expense_category'] = $this->Expensecategory_model->get_expensecategory_for_dd();
           $data['landExpenseData'] = $this->Expense_model->get_landexpense_data($editID);
        
         if(isset($editID)) {
            // echo "work";exit;
            $this->load->library('form_validation');
              # New Insert
                $this->form_validation->set_rules('type_of_land', 'Land Type', 'required');
                $this->form_validation->set_rules('land_batch', 'Land Batch', 'required');
                $this->form_validation->set_rules('land_area', 'Land Area', 'required');
             if ($this->form_validation->run()) {
                // echo "Fixed";exit;
                    $params = array(
                         'name' => $this->input->post('name'),
                        'land_type' => $this->input->post('type_of_land'),
                        'land_batch_no' => $this->input->post('land_batch'),
                        'land_area_no' => $this->input->post('land_area'),
                        'expense_cat_id' => $this->input->post('expense_cat_id'),
                        'date' => date('Y-m-d', strtotime($this->input->post('date'))),
                        'amount' => $this->input->post('amount')
                    );
                   
                $this->Expense_model->update_landExpense($editID, $params);
                redirect('expense/land_expense');
                }else{

        $data['_view'] = 'expense/edit_land_expense';
        $data['edit_id']=$editID;
            $this->load->view('layouts/main', $data);   
    }           
                }   
    }
}
