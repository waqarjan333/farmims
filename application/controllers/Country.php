<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Country extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Country_model');
    }

    function index()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('name', 'Country Name', 'required'); 

        if ($this->form_validation->run()) {
            $params = array(
                'name' => $this->input->post('name'),
                'created_by' => $this->session->userdata('id')
            );
            $this->Country_model->add_country($params);
            $this->session->set_flashdata('success','Country added successfuly');
            redirect('country');
        } else {
            $data['_view'] = 'country/index';
            $this->load->view('layouts/main', $data);
        }
    }

    function get_list()
    {
        $columns = array(
            0 => 'name',
            1 => 'id'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Country_model->get_all_country_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Country_model->get_all_country($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Country_model->country_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Country_model->country_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['name'] = $post->name;
                $nestedData['actions'] = "<button class='btn btn-warning btn-xs btn-edit' code='".$post->id."'>Edit</button>&nbsp;<button class='btn btn-danger btn-xs btn-delete' code='".$post->id."'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    public function edit_country($id)
    {
        # code...
    }

    public function delete_country($id)
    {
        $this->Country_model->delete_country($id);
        echo 1;
    }

    function update_country($id){
        $this->load->library('form_validation');
        $this->form_validation->set_rules('country', 'Country Name', 'required'); 

        if ($this->form_validation->run()) {

            $this->Country_model->update_country($id,['name'=>$this->input->post('country')]);

            return $this->output
            ->set_content_type('application/json')
            ->set_status_header(200)
            ->set_output(json_encode(
                [
                    'status'=>true
                ]
            ));
        }else{
            return $this->output
            ->set_content_type('application/json')
            ->set_status_header(200)
            ->set_output(json_encode(
                [
                    'status'=>false,
                    'error'=>$this->form_validation->error_string(" "," ")
                ]
            ));
        }

    }
}
