<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Manageprice extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Manageprice_model');
    }

    function index()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('amount', 'Amount', 'required');
        $this->form_validation->set_rules('uom', 'Unit ', 'required');
        $this->form_validation->set_rules('product_id', 'Product', 'required');
        $this->form_validation->set_rules('party_id', 'Party', 'required');

        if ($this->form_validation->run()) {
            // Left is database column name, right side is value posted from form
            $params = array(
                'price_amount' => $this->input->post('amount'),
                'unit' => $this->input->post('uom'),
                'created_by' => $this->session->userdata('id'),
                'product_id' => $this->input->post('product_id'),
                'party_id' => $this->input->post('party_id')
            );
            $this->Manageprice_model->add_priceamount($params);
            $this->session->set_flashdata('success', 'Price added successfuly');
            redirect('manageprice');
        } else {
            $data['_view'] = 'manageprice/index';
            $data['item_uom'] = $this->db->get('item_uom')->result_array();
            $data['parties'] = $this->db->get('parties')->result_array();
            $data['products'] = $this->db->get('product')->result_array();
            $this->load->view('layouts/main', $data);
        }
    }

    function get_list()
    {
        $columns = array(
            0 => 'price_amount',
            1 => 'unit',
            3 => 'product_id',
            4 => 'party_id'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Manageprice_model->get_all_pricemanage_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Manageprice_model->get_all_pricemanage($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Manageprice_model->pricemanage_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Manageprice_model->pricemanage_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['amount'] = $post->price_amount;
                $nestedData['measureunit'] = $post->unit_name;

                $nestedData['product'] = $post->product_name;

                $nestedData['party'] = $post->partie_name;


                $nestedData['actions'] = "<a href='" . base_url('manageprice/item/' . $post->id) . "'><button class='btn btn-warning btn-xs'>Edit</button></a>&nbsp;<button class='btn btn-danger btn-xs btn-delete' code='" . $post->id . "'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }
    public function edit_country($id)
    {
        # code...
    }


    function delete_price($id)
    {
        $this->Manageprice_model->delete_priceamount($id);
        echo '1';
    }

    function item($id)
    {

        if ($this->input->method(true) == 'POST') {

            $this->load->library('form_validation');
            $this->form_validation->set_rules('amount', 'Amount', 'required');
            $this->form_validation->set_rules('uom', 'Unit ', 'required');
            $this->form_validation->set_rules('product_id', 'Product', 'required');
            $this->form_validation->set_rules('party_id', 'Party', 'required');

            if ($this->form_validation->run()) {
                // Left is database column name, right side is value posted from form
                $params = array(
                    'price_amount' => $this->input->post('amount'),
                    'unit' => $this->input->post('uom'),
                    'created_by' => $this->session->userdata('id'),
                    'product_id' => $this->input->post('product_id'),
                    'party_id' => $this->input->post('party_id')
                );
                $this->Manageprice_model->update_priceamount($id, $params);
                $this->session->set_flashdata('success', 'Price updated successfuly');
                redirect('manageprice');
            }
        }


        $data['_view'] = 'manageprice/edit';
        $data['item'] = $this->Manageprice_model->get_priceamount($id);
        if ($data['item']==null) {
            $this->session->set_flashdata('error', 'Invalid Price Amount');
            return redirect(base_url('manageprice'));
        }
        $data['item_uom'] = $this->db->get('item_uom')->result_array();
        $data['parties'] = $this->db->get('parties')->result_array();
        $data['products'] = $this->db->get('product')->result_array();
        $this->load->view('layouts/main', $data);
    }
}
