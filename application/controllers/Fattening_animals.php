<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
class Fattening_animals extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Fattening_animals_model');
        $this->load->model('Animals_model');
    }

    function index()
    {
       
        if ($this->input->method(true)=='POST') {
            if ($this->input->post('id')) {
                # Update Request
                $this->load->library('form_validation');
                $this->form_validation->set_rules('nameu', ' Name', 'required');
                $this->form_validation->set_rules('dobu', 'Date Of Birth', 'required');
                $this->form_validation->set_rules('quarantine_periodu', 'Quarantine Days', 'required');
                $this->form_validation->set_rules('weightu', 'Animal Weight', 'required');
                $this->form_validation->set_rules('breedidu', 'Animal Breed', 'required');
                $this->form_validation->set_rules('batch_idu', 'Batch', 'required');
                $this->form_validation->set_rules('sexu', 'sex', 'required');
                if ($this->form_validation->run()) {
                    // Left is database column name, right side is value posted from form
                    $params = array(
                        'name' => $this->input->post('nameu'),
                        'code' => $this->input->post('codeu'),
                        'batch_id' => $this->input->post('batch_idu'),
                        'weight' => $this->input->post('weightu'),
                        'quarantine_period' => $this->input->post('quarantine_periodu'),
                        'dob' => date('Y-m-d', strtotime($this->input->post('dobu'))),
                        'dop' => date('Y-m-d', strtotime($this->input->post('dopu'))),
                        'animal_breed' => $this->input->post('breedidu'),
                        'sex' => $this->input->post('sexu'),
                        'father_id' => $this->input->post('fatheridu'),
                        'mother_id' => $this->input->post('motheridu'),
                        'mendatory_tests'=>json_encode($this->input->post('mendatory_testsu')),
                        'mendatory_vaccines'=>json_encode($this->input->post('mendatory_vaccinesu')),
        
                    );
        
                    // Get KG UOM
                    $uom = $this->db->get_where('item_uom', array('symbol' => 'Kg'))->row_array();
                    if ($uom) {
                        $params['item_uom_id'] = $uom['id'];
                    }
        
                    // $this->db->trans_start();
                    $this->db->where('id',$this->input->post('id'))
                    ->update('fattening_animals',$params);
                    // $this->db->trans_complete();
                    $this->session->set_flashdata('success', 'Fattening animal added successfuly');
                    redirect('fattening_animals');
                }
            } else {
                # Add New
                $this->load->library('form_validation');
                $this->form_validation->set_rules('name', ' Name', 'required');
                $this->form_validation->set_rules('code', ' code', 'required');
                $this->form_validation->set_rules('dob', 'Date Of Birth', 'required');
                $this->form_validation->set_rules('quarantine_period', 'Quarantine Days', 'required');
                $this->form_validation->set_rules('weight', 'Animal Weight', 'required');
                $this->form_validation->set_rules('breedid', 'Animal Breed', 'required');
                $this->form_validation->set_rules('animaltype', 'Animal Type', 'required');
                $this->form_validation->set_rules('batch_id', 'Batch', 'required');
        
                $this->form_validation->set_rules('sex', 'sex', 'required');
                if ($this->form_validation->run()) {
                    // Left is database column name, right side is value posted from form
                    $params = array(
                        'name' => $this->input->post('name'),
                        'code' => $this->input->post('code'),
                        'batch_id' => $this->input->post('batch_id'),
                        'weight' => $this->input->post('weight'),
                        'quarantine_period' => $this->input->post('quarantine_period'),
                        'dob' => date('Y-m-d', strtotime($this->input->post('dob'))),
                        'dop' => date('Y-m-d', strtotime($this->input->post('dop'))),
                        'animal_breed' => $this->input->post('breedid'),
                        'animal_type' => $this->input->post('animaltype'),
                        'sex' => $this->input->post('sex'),
                        'father_id' => $this->input->post('fatherid'),
                        'mother_id' => $this->input->post('motherid'),
                        'created_by' => $this->session->userdata('id'),
                        'farm_id' => $this->session->userdata('active_farm'),
                        'status' => QUARANTINE,
                        'mendatory_tests'=>json_encode($this->input->post('mendatory_tests')),
                        'mendatory_vaccines'=>json_encode($this->input->post('mendatory_vaccines')),
        
                    );
        
                    // Get KG UOM
                    $uom = $this->db->get_where('item_uom', array('symbol' => 'Kg'))->row_array();
                    if ($uom) {
                        $params['item_uom_id'] = $uom['id'];
                    }
        
        
                    $params['avatar'] = '';
                    // Image Upload Code End
                    $this->db->trans_start();
                    $animal_id = $this->Fattening_animals_model->add_fattening_animals($params);
                                $params1 = array(
                        'acc_number' => '102001',
                        'item_id' =>$animal_id,
                        'journal_details' =>'Add Animal Entry',
                        'journal_amount' =>540,
                        'type' =>'Animal'
                    );
         $this->db->insert('account_journal', $params1);
         $lastJournalID= $this->db->insert_id();
          $updateParam = array(
                        'ref_id' => $lastJournalID
                    );


          $this->db->where('journal_id', $lastJournalID);
         $this->db->update('account_journal', $updateParam);

           $params2 = array(
                        'ref_id' => $lastJournalID,
                        'acc_number' => '102002',
                        'item_id' =>$animal_id,
                        'journal_details' =>'Add Animal Entry',
                        'journal_amount' =>-1*540,
                        'type' =>'Animal'
                    );
            $this->db->insert('account_journal', $params2); 

                    $weight_log = array(
                        'animal_id' => $animal_id,
                        'date' => date('Y-m-d'),
                        'weight' => $this->input->post('weight'),
                        'created_by' => $this->session->userdata('id'),
                        'farm_id' => $this->session->userdata('active_farm')
                    );
                    $this->db->insert('fattening_animal_weight_history', $weight_log);
                    $this->db->trans_complete();
                    $this->session->set_flashdata('success', 'Fattening animal added successfuly');
                    redirect('fattening_animals');
                }
            }
            
        }
        


            $this->load->model('Animaltype_model');
            $data['animaltypeid'] = $this->Animaltype_model->get_animaltype_for_dd();

            $this->load->model('Feed_model');
            $data['feed_dd'] = $this->Feed_model->get_feed_for_dd();
            $data['code'] = $this->Fattening_animals_model->get_code();
            $data['batch_code'] = $this->Fattening_animals_model->get_batch_code();
            $data['_view'] = 'fattening_animals/index';


            // $data['vaccines'] = $this->Product_model->get_product_by_category();

            $this->load->model('Animal_test_model');

            $data['tests'] = $this->Animal_test_model->get_all_animal_test_dd();

            $this->load->model('Product_model');

            $data['vaccines'] = $this->Product_model->get_product_by_category(PRODUCT_CATEGORY_VACCINE);

            $this->load->view('layouts/main', $data);
        
    }

    public function importAnimals(){
        
        if(isset($_FILES["upload_file"]["name"])){
        $file_mimes = array('text/x-comma-separated-values', 'text/comma-separated-values', 'application/octet-stream', 'application/vnd.ms-excel', 'application/x-csv', 'text/x-csv', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.msexcel', 'text/plain', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            if(isset($_FILES['upload_file']['name']) && in_array($_FILES['upload_file']['type'], $file_mimes)) {
            $arr_file = explode('.', $_FILES['upload_file']['name']);
            $extension = end($arr_file);
            if('csv' == $extension){
            $reader = new \PhpOffice\PhpSpreadsheet\Reader\Csv();
            } else {
            $reader = new \PhpOffice\PhpSpreadsheet\Reader\Xlsx();
            }
            
            $spreadsheet = $reader->load($_FILES['upload_file']['tmp_name']);
            $sheetData = $spreadsheet->getActiveSheet()->toArray();
            foreach($sheetData as $data)
			{
                if($data[0]!="Name"){
                    $dob = $data[2];
                    $dop = $data[3];
                    $Olddob = strtotime($dob);
                    $new_dob = date('Y-m-d', $Olddob);
                    $Olddop = strtotime($dop);
                    $new_dop = date('Y-m-d', $Olddop);
                    $code = $this->Fattening_animals_model->get_code();
                    $params = array(
                                    'code' => $code,
                                    'name' => $data[0],
                                    'batch_id' => $data[8],//$data[0],
                                    'weight' => $data[1],
                                    'quarantine_period' => $data[5],
                                    'dob' => $new_dob,
                                    'dop' => $new_dop,
                                    'sex' => $data[4],
                                    'created_by' => $this->session->userdata('id'),
                                    'status' => QUARANTINE,
                                    'animal_breed' => $this->input->post('breedid_import'),
                                    'animal_type' => $this->input->post('animaltypeid_import'),
                                    'farm_id' => $this->session->userdata('active_farm'),
                                    'farm_id' => $this->session->userdata('active_farm'),
                                    'farm_id' => $this->session->userdata('active_farm')
                            );
                
                            $uom = $this->db->get_where('item_uom', array('symbol' => 'Kg'))->row_array();
                            if ($uom) {
                                $params['item_uom_id'] = $uom['id'];
                            }
        
        
                            $params['avatar'] = 'cow.png';
                            
                            $animal_id = $this->Fattening_animals_model->add_fattening_animals($params);
                            //exit;
                            $weight_log = array(
                                'animal_id' => $animal_id,
                                'date' => date('Y-m-d'),
                                'weight' => $data[1],
                                'created_by' => $this->session->userdata('id'),
                                'farm_id' => $this->session->userdata('active_farm')
                            );
                    $this->db->insert('fattening_animal_weight_history', $weight_log);
                }
            }
                $this->session->set_flashdata('success', 'Animal Imported successfuly');
                redirect('fattening_animals');
            } else {
                $this->session->set_flashdata('success', 'Animal not Imported successfuly');
                redirect('fattening_animals');
            }
            
            
            } 
    }
    function add_weight()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('new_weight', 'Weight', 'required');
        $this->form_validation->set_rules('weight_date', 'Date', 'required');
        if ($this->form_validation->run()) {
            $weight_log = array(
                'animal_id' => $this->input->post('weight_animal_id'),
                'date' => date('Y-m-d', strtotime($this->input->post('weight_date'))),
                'weight' => $this->input->post('new_weight'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm')
            );

            $new_weight = array(
                'weight' => $this->input->post('new_weight')
            );
            $this->db->trans_start();
            $this->db->insert('fattening_animal_weight_history', $weight_log);
            $this->Fattening_animals_model->update_animal($this->input->post('weight_animal_id'), $new_weight);
            $this->db->trans_complete();
            $this->session->set_flashdata('success', "Animal weight logged successfully");
            redirect('fattening_animals');
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect('fattening_animals');
        }
    }
    function get_batch_list_dd()
    {
        $data = $this->Fattening_animals_model->get_batch_for_dd();
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['code'] . "</option>";
        }
    }

    function create_new_batch()
    {
        $batch_code = $this->Fattening_animals_model->get_batch_code();
        $params = array(
            'code' => $batch_code,
            'created_by' => $this->session->userdata('id'),
            'farm_id' => $this->session->userdata('active_farm')
        );
        $this->db->insert('animal_batch', $params);
        $this->session->set_flashdata('success', 'Batch created successfully');
        echo 1;
    }

    function get_batch_code()
    {
        $batch_code = $this->Fattening_animals_model->get_batch_code();
        echo $batch_code;
    }


    function delete_feterning_animal($code)
    {
        if ($this->Fattening_animals_model->delete_fettening_animal($code)) {
            $this->session->set_flashdata('success', 'animal deleted successfully');
            echo true;
        } else {
            echo false;
        }
    }

    function feed()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('feed_dd[]', 'Feed', 'required');
        $this->form_validation->set_rules('feed_date', 'Feeding Date', 'required');
        if ($this->form_validation->run()) {
            $animals = substr($_POST['selected_animals'], 0, -1);
            $animals = explode(',', $animals);
            // Get Animal Detals For DOB
            $this->db->select('animals.id,animals.dob');
            $this->db->where_in('id', $animals);
            $animals = $this->db->get('animals')->result_array();
            // Get Animal Detals For DOB End

            // Get Animal Age Calculation In Months
            $animal_daily_feed = array();
            $total_animals_to_feed = 0;
            foreach ($animals as $key => $animal) {
                $birthday = new DateTime($animal['dob']);
                $diff = $birthday->diff(new DateTime());
                $months = $diff->format('%m') + 12 * $diff->format('%y');
                $animals[$key]['age'] = $months;
                if ($months >= 2) {
                    $total_animals_to_feed++;
                }
            }
            // Get Animal Age Calculation In Months End
            $this->db->trans_start();
            // Feed Calculation Per Animal According To Age
            foreach ($_POST['feed'] as $feed_id => $feed) {
                $qty_per_animal = $feed / $total_animals_to_feed;
                foreach ($animals as $key => $animal) {
                    if ($animal['age'] >= 18) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal,
                            'feed_date' => date('Y-m-d', strtotime($this->input->post('feed_date'))),
                            'feed_time' => $this->input->post('feed_time'),
                            'animal_id' => $animal['id'],
                            'created_by' => $this->session->userdata('id'),
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    } elseif ($animal['age'] < 18 && $animal['age'] >= 12) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal * 0.667,
                            'feed_date' => date('Y-m-d', strtotime($this->input->post('feed_date'))),
                            'feed_time' => $this->input->post('feed_time'),
                            'animal_id' => $animal['id'],
                            'created_by' => $this->session->userdata('id'),
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    } elseif ($animal['age'] < 12 && $animal['age'] >= 2) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal * 0.333,
                            'feed_date' => date('Y-m-d', strtotime($this->input->post('feed_date'))),
                            'feed_time' => $this->input->post('feed_time'),
                            'animal_id' => $animal['id'],
                            'created_by' => $this->session->userdata('id'),
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    }
                }
                $feed_info = $this->db->get_where('feed', array('id' => $feed_id))->row_array();
                $updated_feed_val = array(
                    'qty' => $feed_info['qty'] - $feed
                );
                $this->db->where('id', $feed_id);
                $this->db->update('feed', $updated_feed_val);
            }
            // Feed Calculation Per Animal According To Age

            $this->db->insert_batch('animal_daily_feeding', $animal_daily_feed);
            $this->db->trans_complete();
            $this->session->set_flashdata('success', $total_animals_to_feed . '&nbsp;Animals Feeded Successfully');
            redirect('animals');
        } else {
            $this->session->set_flashdata('error', validation_errors('<span class="error">', '</span>'));
            redirect('animals');
        }
    }

    function get_animal_by_animaltype_id_male($animal_type)
    {
        $data = $this->Fattening_animals_model->animal_by_animaltype_id($animal_type);
        echo "<option value=''>Select Father</option>";
        foreach ($data['male'] as $d) {
            echo "<option value='" . $d['id'] . "'>" . $d['animals_name'] . "</option>";
        }
    }

    function get_animal_by_animaltype_id_female($animal_type)
    {
        $data = $this->Fattening_animals_model->animal_by_animaltype_id($animal_type);
        echo "<option value=''>Select Mother</option>";
        foreach ($data['female'] as $d) {
            echo "<option value='" . $d['id'] . "'>" . $d['animals_name'] . "</option>";
        }
    }


    function get_breed_by_animaltype_id($animal_type)
    {
        $data = $this->Fattening_animals_model->breed_by_animaltype_id($animal_type);
        echo "<option value=''>Select Breed</option>";
        foreach ($data as $d) {
            echo "<option value='" . $d['id'] . "'>" . $d['breed_name'] . "</option>";
        }
    }

    function get_list()
    {
        $columns = array(
            0 => 'a.code',
            1 => 'a.name',
            2 => 'a.dob',
            3 => 'breed.breed_name',
            4 => 'animal_type.type_of_animal',
            5 => 'a.sex',
            6 => 'item_uom.symbol',
            7 => 'a.weight',
            8 => 'a.status',
            9 => 'a.id',
            10 => 'a.dop',
            11 => 'a.father_id',
            12 => 'a.mother_id'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Fattening_animals_model->get_all_fattening_animals_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Fattening_animals_model->get_all_fattening_animals($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Fattening_animals_model->fattening_animals_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Fattening_animals_model->fattening_animals_search_count($search);
        }
        $data = array();
        if (!empty($posts)) {

            foreach ($posts as $post) {
                if ($post->sex == MALE) {
                    $sex = "MALE";
                } else {
                    $sex = "FEMALE";
                }

                $now = time(); // or your date as well
                $your_date = strtotime($post->dop);
                $datediff = $now - $your_date;
                $days_passed =  round($datediff / (60 * 60 * 24));
                $days_left = intval($post->quarantine_period) - intval($days_passed);

                if ($post->status == ACTIVE) {
                    $status = '<span class="badge badge-pill badge-primary">ACTIVE</span>';
                } else if ($post->status == SUSPENDED) {
                    $status = '<span class="badge badge-pill badge-dark">INACTIVE</span>';
                } else if ($post->status == PREGNENT) {
                    $status = '<span class="badge badge-pill badge-success">PREGNENT</span>';
                } else if ($post->status == HEIFER) {
                    $status = '<span class="badge badge-pill badge-warning">HEIFER</span>';
                } else if ($post->status == QUARANTINE) {
                    if ($days_left < 1) {
                        $status = "<br> <a href='" . base_url('fattening_animals/move_to_shed/' . $post->id) . "' class='btn btn-success btn-sm waves-effect waves-warning'>".$this->lang->line('move_to_shed')."</a>";
                    } else {
                        $status = '<span class="badge badge-pill badge-danger">'.$this->lang->line('quarantined').'</span><br>' . $days_left . $this->lang->line('day_left');
                    }
                    
                } else if ($post->status == DISEASED) {
                    $status = '<span class="badge badge-pill badge-warning">'.$this->lang->line('heifer').'</span>';
                }

                $nestedData['name'] = $post->name;
                $nestedData['code'] = "<img class='img-thumbnailx' src='" . base_url('assets/images/animals/' . $post->avatar) . "' onerror='imgError(this);''><br>" . $post->code;
                $nestedData['batch_no'] = $post->batch_no;
                $where_last_weight = array(
                    'farm_id' => $this->session->userdata('active_farm'),
                    'animal_id' => $post->id
                );
                $this->db->order_by('date', 'desc');
                $last_weight_ago = $this->db->get_where('fattening_animal_weight_history', $where_last_weight)->row_array();
                if ($last_weight_ago) {
                    $now = time(); // or your date as well
                    $your_date = strtotime($last_weight_ago['date']);
                    $datediff = $now - $your_date;
                    $days_passed =  round($datediff / (60 * 60 * 24));
                    if ($days_passed >= 14) {
                        $color = 'warning';
                    } else {
                        $color = 'success';
                    }
                    $old_weight = $last_weight_ago['weight'];
                    $days_passed = "<br> <span class='badge badge-" . $color . "'><b>".$this->lang->line('last_weighted')."</b> <br><br>  " . intval($days_passed) . " ".$this->lang->line('days_ago')."</span>";
                } else {
                    $days_passed = "<br> <span class='badge badge-danger'><b>".$this->lang->line('last_weighted')."</b> <br><br> ".$this->lang->line('not_available')."</span>";
                    $old_weight = 50;
                }


                $weight_btn = "<br><button class='btn btn-info btn-sm btn-block waves-effect waves-light' data-toggle='modal' data-target='.bs-example-modal-sm' onclick='fill_animal_id_in_weight_modal(" . $post->id . "," . $old_weight . ")' ><i class='uil-weight'></i> ".$this->lang->line('weight')."</button>";
                $nestedData['weight'] = $post->weight . " (" . $post->symbol . ")" . $days_passed . $weight_btn;
                $nestedData['status'] = $status;


                // Weight Diff
                $wdiff = $this->Fattening_animals_model->get_fattening_animals_weight_diff($post->id);
                // $wdiff =  ($w) ? ($w->weight - $post->weight) : 'Not Weighted Yet';
                $nestedData['weight'] .= "<br> <span class='badge badge-dark'><b>".$this->lang->line('increase_in_weight')."</b> <br><br>{$wdiff}</span>";


                // $birthday = new DateTime($post->dob);
                // $diff = $birthday->diff(new DateTime());
                // $months = $diff->format('%m') + 12 * $diff->format('%y');

                // Cal Age in Days

                $earlier = new DateTime("2010-07-06");
                $later = new DateTime($post->dop);
                $days = $later->diff($earlier)->format("%a");

                //$nestedData['dob'] = $days . "&nbsp;Day(s)";
                $birthday = new DateTime($post->dob);
                $diff = $birthday->diff(new DateTime());
                $months = $diff->format('%m') + 12 * $diff->format('%y');

                 $nestedData['dob'] = $months . "&nbsp;Months";



                $nestedData['dop'] = $post->dop;
                $nestedData['sex'] = $sex;
                $nestedData['animaltype'] = $post->type;
                $nestedData['breedid'] = $post->breed_name;
                $nestedData['fatherid'] = $post->father_name;
                $nestedData['motherid'] = $post->mother_name;

                $view_profile_btn = "<a href='" . base_url('fattening_animals/view/' . base64_encode($post->id)) . "' class='btn btn-success btn-sm waves-effect waves-light'><i class='uil-eye'></i> ".$this->lang->line('view')."</a>&nbsp;";


                $nestedData['actions'] = $view_profile_btn . "<button class='btn btn-warning btn-sm waves-effect waves-light btn-edit' code='".$post->id."'><i class='uil-edit-alt'></i> ".$this->lang->line('edit')."</button>&nbsp;<button code='" . $post->id . "' class='btn btn-danger delete-fanimal-btn btn-sm waves-effect waves-light'><i class='uil-trash-alt'></i> ".$this->lang->line('delete')."</button>&nbsp;";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    function move_to_shed($fattening_animal_id)
    {
        $params = array(
            'status' => ACTIVE
        );
        $this->Fattening_animals_model->update_animal($fattening_animal_id, $params);
        redirect('fattening_animals');
    }

    function get_vaccination_list()
    {
        $columns = array(
            0 => 'id',
            1 => 'vaccine_date',
            2 => 'next_vaccine',
            // 3 => 'id'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Fattening_animals_model->get_all_fattening_animals_vaccine_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Fattening_animals_model->get_all_fattening_animals_vaccine($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Fattening_animals_model->get_fattening_animals_vaccine_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Fattening_animals_model->get_fattening_animals_vaccine_search_count($search);
        }
        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                if ($post->next_vaccine == null || $post->next_vaccine == "0000-00-00") {
                    $vaccine_btn = "";
                    $next_vccn = "<span class='badge badge-info'>Not Required</span>";
                } else {
                    if ($post->next_taken == 0) {
                        $next_vccn = date('d M,Y', strtotime($post->next_vaccine));
                        $vaccine_btn = "<button class='btn btn-dark btn-sm waves-effect waves-light' data-toggle='modal' data-target='.bs-vaccination-modal-sm' onclick='get_animals_for_vaccine(" . $post->animal_id . ", " . $post->id . ")' ><i class='uil-syringe'></i> Vaccination</button>";
                    } else {
                        $next_vccn = date('d M,Y', strtotime($post->next_vaccine)) . "&nbsp;&nbsp;<span class='badge badge-success'>Vaccinated</span>";
                        $vaccine_btn = "";
                    }
                }


                $nestedData['animal'] = $post->name . " (" . $post->code . ")";
                $nestedData['vaccine_date'] = date('d M,Y', strtotime($post->vaccine_date));
                $nestedData['next_vaccine_date'] = $next_vccn;
                $nestedData['actions'] = $vaccine_btn;

                 //$nestedData['actions'] = "<button class='btn btn-warning btn-sm waves-effect waves-light'><i class='uil-edit-alt'></i> Edit</button>&nbsp;<button class='btn btn-danger btn-sm waves-effect waves-light'><i class='uil-trash-alt'></i> Delete</button>&nbsp;" . $yeildbtn;

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    function get_weight_history($animal_id)
    {

        $animal_id = base64_decode($animal_id);

        $columns = [
            '0' => 'id',
            '1' => 'date',
        ];

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end

        $totalData = $this->Fattening_animals_model->get_fattening_animal_weight_count($animal_id);

        $totalFiltered = $totalData;

        $order = $columns[$this->input->post('order')[0]['column']];


        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Fattening_animals_model->get_fattening_animals_weight($limit, $start, $animal_id, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Fattening_animals_model->get_fattening_animals_search_weight($limit, $start, $animal_id, $search, $order, $dir);

            $totalFiltered = $this->Fattening_animals_model->get_fattening_animal_weight_search_count($animal_id, $search);
        }


        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $posts
        );

        echo json_encode($json_data);
    }

    function get_vaccine_history($animal_id)
    {

        $animal_id = base64_decode($animal_id);

        $columns = [
            '0' => 'id',
            '1' => 'date',
            '2' => 'next_vaccine',
            '3' => 'next_taken'
        ];

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end

        $totalData = $this->Fattening_animals_model->get_fattening_animal_vaccine_count($animal_id);

        $totalFiltered = $totalData;

        $order = $columns[$this->input->post('order')[0]['column']];

        $data = array();
        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Fattening_animals_model->get_fattening_animals_vaccine($limit, $start, $animal_id, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Fattening_animals_model->get_fattening_animals_search_vaccine($limit, $start, $animal_id, $search, $order, $dir);

            $totalFiltered = $this->Fattening_animals_model->get_fattening_animal_vaccine_search_count($animal_id, $search);
        }

        foreach ($posts as $key => $post) {

            $nestedData['date'] = $post->vaccine_date;
            $nestedData['vaccine'] = $post->vaccine;
            $nestedData['next_taken'] = ($post->next_taken) ? '<span class="text-success">Yes</span>' : '<span class="text-danger">No</span>';
            $nestedData['next_vaccine'] = $post->next_vaccine;

            $data[] = $nestedData;
        }


        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    function vaccine()
    {

        $this->load->model('Animaltype_model');
        $data['animaltypeid'] = $this->Animaltype_model->get_animaltype_for_dd();
        $data['_view'] = 'fattening_animals/vaccine';
        $this->load->view('layouts/main', $data);
    }

    function get_product_list_for_dd_cattle()
    {
        $this->db->where('farm_id', $this->session->userdata('active_farm'));
        $this->db->where('stock_unit >', 0);
        $data = $this->db->get('product')->result_array();
        echo "<option value=''>Select Vaccine</option>";
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['product_name'] . "</option>";
        }
    }

    function get_animals_for_vaccine()
    {
        $this->db->select('fattening_animals.id, fattening_animals.name, fattening_animals.code');
        $this->db->where('farm_id', $this->session->userdata('active_farm'));
        // $this->db->where('status !=', DISEASED);
        // $this->db->or_where('status !=', SUSPENDED);
        // Above condition were causing in-correct results
        $this->db->where_not_in('status', [DISEASED, SUSPENDED]);
        $data = $this->db->get('fattening_animals')->result_array();
        // echo "Farm ID ".$this->session->active_farm;
        echo "<option value=''>Select Animal</option>";
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['name'] . " (" . $value['code'] . ")</option>";
        }
    }

    function vaccination()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('vaccine_animal', 'Animal', 'required');
        $this->form_validation->set_rules('vaccine_date', 'Vaccine Date', 'required');
        if ($this->form_validation->run()) {
            $params = array(
                'vaccine_date' => date('Y-m-d', strtotime($this->input->post('vaccine_date'))),
                'animal_id' => $this->input->post('vaccine_animal'),
                'vaccine_id' => $this->input->post('vaccine_id'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm')
            );

            if ($this->input->post('next_vaccine_date')) {
                $params['next_vaccine'] = date('Y-m-d', strtotime($this->input->post('next_vaccine_date')));
            }
            $product = $this->db->get_where('product', array('id' => $this->input->post('vaccine_id')))->row_array();
            $new_qty = array(
                'stock_unit' => $product['stock_unit'] - 1
            );
            $this->db->trans_start();
            if ($this->input->post('table_id')) {
                $vaccine_status = array(
                    'next_taken' => 1
                );
                $this->db->where('id', $this->input->post('table_id'));
                $this->db->update('fattening_animal_vaccine', $vaccine_status);
            }

            $this->db->where('id', $product['id']);
            $this->db->update('product', $new_qty);
            $this->db->insert('fattening_animal_vaccine', $params);
            $this->db->trans_complete();
                    $params1 = array(
                        'acc_number' => '502001',
                        'item_id' =>0,
                        'journal_details' =>'Vaccine Entry',
                        'journal_amount' =>44,
                        'type' =>'Vaccine'
                    );
         $this->db->insert('account_journal', $params1);
         $lastJournalID= $this->db->insert_id();
          $updateParam = array(
                        'ref_id' => $lastJournalID
                    );


          $this->db->where('journal_id', $lastJournalID);
         $this->db->update('account_journal', $updateParam);

           $params2 = array(
                        'ref_id' => $lastJournalID,
                        'acc_number' => '105001',
                        'item_id' =>0,
                        'journal_details' =>'Vaccine Entry',
                        'journal_amount' =>-1*44,
                        'type' =>'Vaccine'
                    );
            $this->db->insert('account_journal', $params2); 
            $this->session->set_flashdata('success', 'Fattening Animal Vaccinatied Successfuly');
            redirect('fattening_animals/vaccine');
        } else {
            $this->load->model('Animaltype_model');
            $data['animaltypeid'] = $this->Animaltype_model->get_animaltype_for_dd();

            $data['pregnanat_animals'] = $this->Fattening_animals_model->get_all_pregnant_animals();
            $data['code'] = $this->Fattening_animals_model->get_code();
            $data['_view'] = 'fattening_animals/vaccine';

            $this->load->view('layouts/main', $data);
        }
    }


    function get_mothers($animal_type_id)
    {
        $data = $this->Fattening_animals_model->get_animals_eligible_for_pregnancy($animal_type_id);
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['name'] . " (" . $value['code'] . ")</option>";
        }
    }
    function get_fathers()
    {
        $data = $this->Fattening_animals_model->get_fathers();
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['name'] . " (" . $value['code'] . ") ( Age: " . $value['age'] . " Months )</option>";
        }
    }

    function view($encoded_animal_id)
    {
        $animal_id = base64_decode($encoded_animal_id);
        $data['animal'] = $this->Fattening_animals_model->get_animal($animal_id);
        $data['_view'] = 'fattening_animals/view';
        $this->load->view('layouts/main', $data);
    }


    function get_fattening_animal($id){
        echo json_encode($this->Fattening_animals_model->get_fattening_animal($id));
    }

}   
