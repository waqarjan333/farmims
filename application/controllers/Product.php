<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Product extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Product_model');
    }

    function index()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('productcatid', 'Product Category', 'required');
        $this->form_validation->set_rules('name', 'Name', 'required');
        $this->form_validation->set_rules('saleunit', 'Sale Unit', 'required');
        $this->form_validation->set_rules('purchaseunit', 'Purchase Unit', 'required');




        if ($this->form_validation->run()) {
            // Left is database column name, right side is value posted from form
            $params = array(
                'product_category_id' => $this->input->post('productcatid'),
                'product_name' => $this->input->post('name'),
                'product_code' => $this->input->post('code'),
                'expiry_date' => $this->input->post('expdate'),
                'serial_number' => $this->input->post('snumber'),
                'sale_unit' => ucwords($this->input->post('saleunit')),
                'purchase_unit' => ucwords($this->input->post('purchaseunit')),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm')
            );
            $this->Product_model->add_product($params);
            $this->session->set_flashdata('success', 'Product added successfuly');
            redirect('product');
        } else {
            $this->load->model('Productcategory_model');
            $data['productcategory'] = $this->Productcategory_model->get_productcategory_for_dd();
            $data['code'] = $this->Productcategory_model->get_code();
            $data['item_uom'] = $this->db->where('status!=', DELETED)->get('item_uom')->result_array();
            $data['_view'] = 'product/index';
            $this->load->view('layouts/main', $data);
        }
    }

    function get_list()
    {
        $columns = array(
            0 => 'product_name',
            1 => 'product_code',
            2 => 'expiry_date',
            3 => 'serial_number',
            4 => 'sale_unit',
            5 => 'purchase_unit',
            6 => 'product_category_id',
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Product_model->get_all_product_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Product_model->get_all_product($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Product_model->product_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Product_model->product_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['name'] = $post->product_name;
                $nestedData['code'] = $post->product_code;
                $nestedData['expdate'] = $post->expiry_date;

                $nestedData['snumber'] = $post->serial_number;

                $nestedData['saleunit'] = $this->Product_model->get_unit_name($post->sale_unit);
                $nestedData['purchaseunit'] = $this->Product_model->get_unit_name($post->purchase_unit);
                $nestedData['productcatid'] = $this->Product_model->get_category_name($post->product_category_id);


                $nestedData['actions'] = "<a href='" . base_url('product/item/' . $post->id) . "'><button class='btn btn-warning btn-xs btn-edit' >Edit</button></a>&nbsp;<button class='btn btn-danger btn-xs btn-delete' code='" . $post->id . "'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }

    public function edit_country($id)
    {
        # code...
    }

    public function delete_product($id)
    {
        echo $this->Product_model->delete_product($id);
    }


    function item($id=-1)
    {

        if ($this->input->method(true) == 'POST') {
            $this->load->library('form_validation');
            $this->form_validation->set_rules('productcatid', 'Product Category', 'required');
            $this->form_validation->set_rules('name', 'Name', 'required');
            $this->form_validation->set_rules('saleunit', 'Sale Unit', 'required');
            $this->form_validation->set_rules('purchaseunit', 'Purchase Unit', 'required');




            if ($this->form_validation->run()) {
                // Left is database column name, right side is value posted from form
                $params = array(
                    'product_category_id' => $this->input->post('productcatid'),
                    'product_name' => $this->input->post('name'),
                    'product_code' => $this->input->post('code'),
                    'expiry_date' => $this->input->post('expdate'),
                    'serial_number' => $this->input->post('snumber'),
                    'sale_unit' => ucwords($this->input->post('saleunit')),
                    'purchase_unit' => ucwords($this->input->post('purchaseunit')),
                    'created_by' => $this->session->userdata('id'),
                    'farm_id' => $this->session->userdata('active_farm')
                );
                $this->Product_model->update_product($id,$params);
                $this->session->set_flashdata('success', 'Product added successfuly');
                redirect('product');
            }
        }

        $this->load->model('Productcategory_model');
        $data['item'] = $this->Product_model->get_product($id);
        if ($data['item'] == null) {
            $this->session->set_flashdata('error', 'Invalid Price Amount');
            return redirect(base_url('product'));
        }
        $data['productcategory'] = $this->Productcategory_model->get_productcategory_for_dd();
        $data['code'] = $this->Productcategory_model->get_code();
        $data['item_uom'] = $this->db->where('status!=', DELETED)->get('item_uom')->result_array();
        $data['_view'] = 'product/edit';
        $this->load->view('layouts/main', $data);
    }


    function stock($product_id){
        echo json_encode($this->Product_model->get_available_stock($product_id));
    }
}
