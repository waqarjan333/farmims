<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Feed extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Feed_model');
    }

    function index()
    {
        $this->load->library('form_validation');

        if ($this->input->method(true) == 'POST') {
            # code...


            if ($this->input->post('id')) {


                $this->form_validation->set_rules('feedcode', 'Feed Code', 'required'); 
                $this->form_validation->set_rules('cropdate', 'Date', 'required');
                if (isset($_POST) && count($_POST) > 0) {
                    if ($this->input->post('processed') == FEED_MIXTURE) {
                        $this->form_validation->set_rules('formulaformation[]', 'Formation Formula', 'required');
                    }
                }
                $this->form_validation->set_rules('processed', 'Process Status', 'required');
                $this->form_validation->set_rules('feedid', 'Feed Category', 'required');
                if ($this->form_validation->run()) {
                    // Left is database column name, right side is value posted from form
                    $params = array(
                        'feed_code' => $this->input->post('feedcode'), 
                        'crop_date' => $this->input->post('cropdate'),
                        'processed' => $this->input->post('processed'), 
                        'feed_id' => $this->input->post('feedid'),
                        'qty' => $this->input->post('qty'),
                        'farm_id' => $this->session->userdata('active_farm'),
                        'created_by' => $this->session->userdata('id')
                    );
                    $this->db->trans_start();
                    $feed_id = $this->Feed_model->add_feed($params);
                    if ($this->input->post('processed') == FEED_MIXTURE) {
                        foreach ($_POST['formulaformation'] as $key => $value) {
                            $mixture[] = array(
                                'qty' => $_POST['feed'][$value],
                                'feed_id' => $feed_id,
                                'ingredient_id' => $value
                            );
                        }
                        $this->db->insert_batch('feed_mixture',$mixture);
                    }
                    $this->db->trans_complete();
                    $this->session->set_flashdata('success', 'Feed Added Successfuly');
                    redirect('feed');
                }


            } else {
                $this->form_validation->set_rules('feedcode', 'Feed Code', 'required');
                $this->form_validation->set_rules('cropdate', 'Date', 'required');
                if (isset($_POST) && count($_POST) > 0) {
                    if ($this->input->post('processed') == FEED_MIXTURE) {
                        $this->form_validation->set_rules('formulaformation[]', 'Formation Formula', 'required');
                    }
                }
                $this->form_validation->set_rules('processed', 'Process Status', 'required');
                $this->form_validation->set_rules('feedid', 'Feed Category', 'required');
                if ($this->form_validation->run()) {
                    // Left is database column name, right side is value posted from form
                    $params = array(
                        'feed_code' => $this->input->post('feedcode'),
                        'crop_date' => $this->input->post('cropdate'),
                        'processed' => $this->input->post('processed'),
                        'feed_id' => $this->input->post('feedid'),
                        'qty' => $this->input->post('qty'),
                        'farm_id' => $this->session->userdata('active_farm'),
                        'created_by' => $this->session->userdata('id')
                    );
                    $this->db->trans_start();
                    $feed_id = $this->Feed_model->add_feed($params);
                    if ($this->input->post('processed') == FEED_MIXTURE) {
                        foreach ($_POST['formulaformation'] as $key => $value) {
                            $mixture[] = array(
                                'qty' => $_POST['feed'][$value],
                                'feed_id' => $feed_id,
                                'ingredient_id' => $value
                            );
                        }
                        $this->db->insert_batch('feed_mixture', $mixture);
                    }
                    $this->db->trans_complete();
                    $this->session->set_flashdata('success', 'Feed Added Successfuly');
                    redirect('feed');
                }
            }
        }


        $this->load->model('Feedcategory_model');
        $data['feedcategory'] = $this->Feedcategory_model->get_feedcategory_for_dd();
        $data['uom'] = $this->db->get_where('item_uom', array('status' => ACTIVE))->result_array();
        $data['code'] = $this->Feed_model->get_code();
        $data['_view'] = 'feed/index';
        $this->load->view('layouts/main', $data);
    }

    function get_mixture_dd()
    {
        $data = $this->Feed_model->get_mixture_items_for_dd();
        foreach ($data as $key => $value) {
            echo "<option value='" . $value['id'] . "'>" . $value['feed_code'] . "</option>";
        }
    }

    function get_list()
    {
        $columns = array(
            0 => 'feed.feed_code',
            1 => 'feed.formula_formation',
            2 => 'feed.crop_date',
            3 => 'feed.qty',
            4 => 'feed.processed',
            5 => 'feed_category.name',
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Feed_model->get_all_feed_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Feed_model->get_all_feed($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Feed_model->feed_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Feed_model->feed_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['code'] = $post->feed_code;
                $nestedData['formula'] = "";
                $nestedData['cropdate'] = $post->crop_date;
                if ($post->processed == FEED_PROCESSED) {
                    $processed = '<span class="badge badge-primary">Processed</span>';
                } else if ($post->processed == FEED_RAW) {
                    $processed = '<span class="badge badge-info">Raw</span>';
                } else if ($post->processed == FEED_MIXTURE) {
                    $processed = '<span class="badge badge-dark">MIXTURE</span>';
                }
                $nestedData['processed'] = $processed;

                $nestedData['feedid'] = $post->category_name;
                $nestedData['qty'] = $post->qty;


                $nestedData['actions'] = "<button class='btn btn-warning btn-xs btn-edit' code='" . $post->id . "'>Edit</button>&nbsp;<button class='btn btn-danger btn-xs btn-delete' code='" . $post->id . "'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }
    public function edit_country($id)
    {
        # code...
    }


    public function delete_feed($id)
    {
        echo $this->Feed_model->delete_feed($id);
    }

    public function get_feed($id)
    {
        echo json_encode($this->Feed_model->get_feed($id));
    }
}
