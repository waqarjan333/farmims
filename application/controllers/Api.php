<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Api extends CI_Controller
{

    function __construct()
    {
        parent::__construct();
    }


    function store_device_data()
    {

        try {
            $this->db->trans_start(FALSE);
            $_POST = json_decode(file_get_contents('php://input'), true);
            $data = array(
                'time' => $_POST['time'],
                'device_type' => $_POST['device_type'],
                'device' => $_POST['device'],
                'seq_num' => $_POST['seq_num'],
                'data' => $_POST['data']
            );
            $this->db->insert('surdevdata', $data);
            $this->db->trans_complete();

            // documentation at
            // https://www.codeigniter.com/userguide3/database/queries.html#handling-errors
            // says; "the error() method will return an array containing its code and message"
            $db_error = $this->db->error();
            if (!empty($db_error)) {
                throw new Exception('Database error! Error Code [' . $db_error['code'] . '] Error: ' . $db_error['message']);
                return false; // unreachable retrun statement !!!
            }
            return TRUE;
        } catch (Exception $e) {
            // this will not catch DB related errors. But it will include them, because this is more general. 
            // log_message('error: ', $e->getMessage());
            return TRUE;
        }
    }

    function login()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('email', 'Email', 'required');
        $this->form_validation->set_rules('password', 'Password', 'required');

        if ($this->form_validation->run()) {
            $where = array(
                'email' => $_POST['email'],
                'password' => md5($_POST['password']),
            );
            $user = $this->db->get_where('users', $where)->row_array();
            if ($user) {
                if ($user['role'] == ROLE_FARM_OWNER || $user['role'] == ROLE_FARM_MANAGER || $user['role'] == ROLE_FARM_OPERATOR) {

                    $where = array(
                        'user_id' => $user['id']
                    );
                    $list = $this->db->get_where('user_farm', $where)->result_array();
                    $farm_ids = array();
                    foreach ($list as $li) {
                        array_push($farm_ids, $li['farm_id']);
                    }
                    $this->db->select('id,farm_code,title,phone,area,property_type');
                    $this->db->where_in('id', $farm_ids);
                    $farms = $this->db->get('farm')->result_array();

                    $data['farms'] = $farms;
                    $data['details'] = $user;
                    $data['response_status'] = "1";
                    $data['msg'] = "Success!";
                    echo json_encode($data);
                } else {
                    $data['response_status'] = "2";
                    $data['msg'] = "Invalid Role Access";
                    echo json_encode($data);
                }
            }
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request!";
            echo json_encode($data);
        }
    }

    function get_farm_list_by_user_id()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('user_id', 'User', 'required');
        if ($this->form_validation->run()) {
            $where = array(
                'user_id' => $_POST['user_id']
            );
            $list = $this->db->get_where('user_farm', $where)->result_array();
            $farms = array();
            foreach ($list as $li) {
                $this->db->select('id,farm_code,title,phone,area,property_type');
                $farms[] = $this->db->get_where('farm', array('id' => $li['farm_id']))->row_array();
            }
            $data['details'] = $farms;
            $data['response_status'] = "1";
            $data['msg'] = "Success!";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request!";
            echo json_encode($data);
        }
    }

    function get_female_animal_list_by_farm_id()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $this->db->select('animals.id,animals.code,animals.name');
            $animals = $this->db->get_where('animals', array('farm_id' => $_POST['farm_id'], 'animals.sex' => FEMALE))->result_array();
            foreach ($animals as $key => $animal) {
                $animals[$key]['yesterday_yeild'] = $this->get_yesterday_yeild($animal['id']);
            }
            $data['animals'] = $animals;
            $data['response_status'] = "1";
            $data['msg'] = "Success!";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request!";
            echo json_encode($data);
        }
    }

    function get_yesterday_yeild($animal_id)
    {
        $this->db->select('SUM(milk_yeild.qty) as total_yeild');
        $wherey = array(
            'animal_id' => $animal_id,
            'date' => date("Y-m-d", strtotime("yesterday"))
        );
        $data =  $this->db->get_where('milk_yeild', $wherey)->row_array();
        return $data['total_yeild'];
    }

    function get_today_yeild($animal_id)
    {
        $this->db->select('SUM(milk_yeild.qty) as total_yeild');
        $wheret = array(
            'animal_id' => $animal_id,
            'date' => date('Y-m-d')
        );
        $data = $this->db->get_where('milk_yeild', $wheret)->row_array();
        return $data['total_yeild'];
    }

    function get_animal_types()
    {
        $animal_types = $this->db->get('animal_type')->result_array();
        $data['details'] = $animal_types;
        $data['response_status'] = "1";
        $data['msg'] = "Success!";
        echo  json_encode($data);
    }


    function get_all_livestock_group_by_type()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $animal_types = $this->db->get('animal_type')->result_array();
            foreach ($animal_types as $key => $value) {
                $this->db->select('a.*');
                $this->db->where('a.status!=', DELETED);
                $this->db->where('a.farm_id', $_POST['active_farm']);
                $this->db->where('a.animal_type', $value['id']);
                $animal_types[$key]['animals'] = $this->db->get('animals as a')->result_array();
            }
            $data['details'] = $animal_types;
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }

    function feed_livestock()
    {
        if (isset($_POST) && count($_POST) > 0) {
            // $animals = substr($_POST['selected_animals'], 0, -1);
            $animals = $_POST['selected_animals'];
            $animals = explode(',', $animals);
            // Get Animal Detals For DOB
            $this->db->select('animals.id,animals.dob');
            $this->db->where_in('id', $animals);
            $animals = $this->db->get('animals')->result_array();
            // Get Animal Detals For DOB End

            // Get Animal Age Calculation In Months
            $animal_daily_feed = array();
            $total_animals_to_feed = 0;
            foreach ($animals as $key => $animal) {
                $birthday = new DateTime($animal['dob']);
                $diff = $birthday->diff(new DateTime());
                $months = $diff->format('%m') + 12 * $diff->format('%y');
                $animals[$key]['age'] = $months;
                if ($months >= 2) {
                    $total_animals_to_feed++;
                }
            }
            // Get Animal Age Calculation In Months End
            $this->db->trans_start();
            // Feed Calculation Per Animal According To Age
            foreach ($_POST['feed'] as $feed_id => $feed) {
                $qty_per_animal = $feed / $total_animals_to_feed;
                foreach ($animals as $key => $animal) {
                    if ($animal['age'] >= 18) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal,
                            'feed_date' => date('Y-m-d', strtotime($_POST['feed_date'])),
                            'feed_time' => $_POST['feed_time'],
                            'animal_id' => $animal['id'],
                            'created_by' => $_POST['login_id'],
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    } elseif ($animal['age'] < 18 && $animal['age'] >= 12) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal * 0.667,
                            'feed_date' => date('Y-m-d', strtotime($_POST['feed_date'])),
                            'feed_time' => $_POST['feed_time'],
                            'animal_id' => $animal['id'],
                            'created_by' => $_POST['login_id'],
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    } elseif ($animal['age'] < 12 && $animal['age'] >= 2) {
                        $animal_daily_feed[] = array(
                            'qty' => $qty_per_animal * 0.333,
                            'feed_date' => date('Y-m-d', strtotime($_POST['feed_date'])),
                            'feed_time' => $_POST['feed_time'],
                            'animal_id' => $animal['id'],
                            'created_by' => $_POST['login_id'],
                            'feed_id' => $feed_id,
                            'age_at_feeding_time' => $animal['age']
                        );
                    }
                }
                $feed_info = $this->db->get_where('feed', array('id' => $feed_id))->row_array();
                $updated_feed_val = array(
                    'qty' => $feed_info['qty'] - $feed
                );
                $this->db->where('id', $feed_id);
                $this->db->update('feed', $updated_feed_val);
            }
            // Feed Calculation Per Animal According To Age

            $this->db->insert_batch('animal_daily_feeding', $animal_daily_feed);
            $this->db->trans_complete();
            $data['response_status'] = "1";
            $data['msg'] = "Animals Feeded Successfuly";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }

    function get_all_cattle_group_by_batch()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $batches = $this->db->get_where('animal_batch', array('farm_id' => $_POST['active_farm']))->result_array();
            foreach ($batches as $key => $value) {
                $this->db->select('a.*, af.name as father_name, am.name as mother_name');
                $this->db->join('fattening_animals as af', 'af.id = a.father_id', 'left outer');
                $this->db->join('fattening_animals as am', 'am.id = a.mother_id', 'left outer');
                $this->db->where('a.status!=', DELETED);
                $this->db->where('a.farm_id', $_POST['active_farm']);
                $this->db->where('a.batch_id', $value['id']);
                $batches[$key]['fattening_animals'] = $this->db->get('fattening_animals as a')->result_array();
            }
            $data['details'] = $batches;
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }


    function get_feed_for_dd()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $this->db->select('feed.*');
            $this->db->where('feed.status!=', DELETED);
            $this->db->where('feed.farm_id', $_POST['active_farm']);
            $this->db->where('feed.qty >', 0);
            $data['details'] = $this->db->get('feed')->result_array();
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }


    function add_animal_yeild()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('qty', 'Milk Quantity', 'required|numeric');
        $this->form_validation->set_rules('animal_id', 'Select Animal', 'required');
        $this->form_validation->set_rules('date', 'Date', 'required');
        if ($this->form_validation->run()) {
            $params = array(
                'qty' => $_POST['qty'],
                'date' => date('Y-m-d', strtotime($_POST['date'])),
                'animal_id' => $_POST['animal_id'],
                'approx_exac' => $_POST['yelid'],
                'routine' => $_POST['routine'],
                'created_by' => $_POST['user_id'],
                'farm_id' => $_POST['active_farm']
            );
            $this->db->insert('milk_yeild', $params);
            $data['response_status'] = "1";
            $data['msg'] = "Yeild Added Successfully!";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = validation_errors();
            echo json_encode($data);
        }
    }

    function add_yeild_bulk()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $where = array(
                'animal_type' => $_POST['animal_type'],
                'farm_id' => $_POST['active_farm'],
                'sex' => FEMALE,
                'status' => ACTIVE
            );
            $animals = $this->db->get_where('animals', $where)->result_array();

            $skipped_animals = 0;
            foreach ($animals as $key => $value) {
                $check_yeild_where =  array(
                    'animal_id' => $value['id'],
                    'farm_id' => $_POST['active_farm'],
                    'date' => date('Y-m-d', strtotime($_POST['milking_date'])),
                    'routine' => $_POST['routine']
                );
                $has_yeild = $this->db->get_where('milk_yeild', $check_yeild_where)->row_array();
                if ($has_yeild) {
                    $skipped_animals++;
                } else {
                    $params[] = array(
                        'qty' => 0, // Keep it zero for now, will replace after finiding exacted milked animals
                        'date' => date('Y-m-d', strtotime($_POST['milking_date'])),
                        'animal_id' => $value['id'],
                        'routine' => $_POST['routine'],
                        'approx_exac' => $_POST['approx_exact'],
                        'created_by' => $_POST['login_id'],
                        'farm_id' => $_POST['active_farm']
                    );
                }
            }
            $milkable_animals = count($animals) - $skipped_animals;
            if ($milkable_animals != 0) {
                $avg_milk_yeild = $_POST['milk_quantity'] / $milkable_animals;
                foreach ($params as $key => $value) {
                    $params[$key]['qty'] = $avg_milk_yeild;
                }
            }

            $farm = $this->db->get_where('farm', array('id' => $_POST['active_farm']))->row_array();
            $new_yeild = array(
                'available_milk_qty' => $farm['available_milk_qty'] + $_POST['milk_quantity']
            );

            $this->load->model('Farm_model');
            $this->db->trans_start();
            if ($milkable_animals != 0) {
                $this->Farm_model->update_farm($_POST['active_farm'], $new_yeild);
                $this->db->insert_batch('milk_yeild', $params);
            }
            $this->db->trans_complete();
            if ($skipped_animals == 0) {
                $data['response_status'] = "1";
                $data['msg'] = "Yeild Added Successfully";
            } else if ($milkable_animals == 0) {
                $data['response_status'] = "2";
                $data['msg'] = "There Were No Yeildable Animals Found";
            } else {
                $data['response_status'] = "2";
                $data['msg'] = "Yeild Added Successfully, " . $skipped_animals . " Animals Skipped - They Were Already Yeilded";
            }
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }


    function add_weight()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $weight_log = array(
                'animal_id' => $_POST['animal_id'],
                'date' => date('Y-m-d', strtotime($_POST['weight_date'])),
                'weight' => $_POST['new_weight'],
                'created_by' => $_POST['login_id'],
                'farm_id' => $_POST['active_farm']
            );

            $new_weight = array(
                'weight' => $_POST['new_weight']
            );
            $this->db->trans_start();
            $this->db->insert('fattening_animal_weight_history', $weight_log);
            $this->load->model('Fattening_animals_model');
            $this->Fattening_animals_model->update_animal($_POST['animal_id'], $new_weight);
            $this->db->trans_complete();
            $data['response_status'] = "1";
            $data['msg'] = "Animal Weight Updated";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }

    function get_expense_types()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $this->db->select('expense_category.id, expense_category.name as expense_category_name');
            $this->db->where('status', ACTIVE);
            $this->db->where('farm_id', $_POST['active_farm']);
            $data['details'] = $this->db->get('expense_category')->result_array();
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }

    function add_expense()
    {
        if (isset($_POST) && count($_POST) > 0) {

            $params = array(
                'name' => $_POST['name'],
                'expense_cat_id' => $_POST['expense_cat_id'],
                'date' => date('Y-m-d', strtotime($_POST['date'])),
                'amount' => $_POST['amount'],
                'created_by' => $_POST['login_id'],
                'farm_id' => $_POST['active_farm']
            );
            $this->load->model('Expense_model');
            $this->Expense_model->add_expense($params);
            $data['response_status'] = "1";
            $data['msg'] = "Expense Added";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }

    function get_livestock_list()
    {
        if (isset($_POST) && count($_POST) > 0) {

            $page_number = ($_POST['page_number']) ? $_POST['page_number'] : 1;
            if ($page_number == 0 || $page_number == 1) {
                if ($_POST['page_number']) {
                    $limit_string = "LIMIT 0,15";
                } else {
                    $limit_string = "LIMIT 0,25";
                }
            } else {
                $offsetx = ($page_number - 1) * 15;
                $limit_string = "LIMIT " . $offsetx . ",15";
            }
            $sql = "SELECT animals.* FROM animals  WHERE animals.farm_id = " . $_POST['active_farm'] . " " . $limit_string . ";";
            $query = $this->db->query($sql);
            $animals = $query->result();

            foreach ($animals as $key => $value) {
                $animals[$key]->todayYeild = $this->get_today_yeild($value->id);
                $animals[$key]->yesterdayYeild = $this->get_yesterday_yeild($value->id);
            }
            $data['animals'] = $animals;
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }

    function get_cattle_list()
    {
        if (isset($_POST) && count($_POST) > 0) {

            $page_number = ($_POST['page_number']) ? $_POST['page_number'] : 1;
            if ($page_number == 0 || $page_number == 1) {
                if ($_POST['page_number']) {
                    $limit_string = "LIMIT 0,15";
                } else {
                    $limit_string = "LIMIT 0,25";
                }
            } else {
                $offsetx = ($page_number - 1) * 15;
                $limit_string = "LIMIT " . $offsetx . ",15";
            }
            $sql = "SELECT fattening_animals.*, animal_batch.code as batch_code FROM fattening_animals LEFT JOIN animal_batch ON fattening_animals.batch_id = animal_batch.id  WHERE fattening_animals.farm_id = " . $_POST['active_farm'] . " " . $limit_string . ";";
            $query = $this->db->query($sql);
            $animals = $query->result();

            $data['animals'] = $animals;
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }

    function get_expense_list()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $page_number = ($_POST['page_number']) ? $_POST['page_number'] : 1;
            if ($page_number == 0 || $page_number == 1) {
                if ($_POST['page_number']) {
                    $limit_string = "LIMIT 0,15";
                } else {
                    $limit_string = "LIMIT 0,25";
                }
            } else {
                $offsetx = ($page_number - 1) * 15;
                $limit_string = "LIMIT " . $offsetx . ",15";
            }
            $sql = "SELECT expense.*, expense_category.name as expense_cat FROM expense LEFT JOIN expense_category ON expense.expense_cat_id = expense_category.id  WHERE expense.farm_id = " . $_POST['active_farm'] . " " . $limit_string . ";";
            $query = $this->db->query($sql);
            $animals = $query->result();

            $data['expense'] = $animals;
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }


    function get_livestock_vaccination_list()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $page_number = ($_POST['page_number']) ? $_POST['page_number'] : 1;
            if ($page_number == 0 || $page_number == 1) {
                if ($_POST['page_number']) {
                    $limit_string = "LIMIT 0,15";
                } else {
                    $limit_string = "LIMIT 0,25";
                }
            } else {
                $offsetx = ($page_number - 1) * 15;
                $limit_string = "LIMIT " . $offsetx . ",15";
            }
            $sql = "SELECT animal_vaccine.*,  animals.name, animals.code FROM animal_vaccine JOIN animals ON animal_vaccine.animal_id = animals.id  WHERE animal_vaccine.farm_id = " . $_POST['active_farm'] . " " . $limit_string . ";";
            $query = $this->db->query($sql);
            $vac_list = $query->result();

            $data['vaccination'] = $vac_list;
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }

    function get_cattle_vaccination_list()
    {
        if (isset($_POST) && count($_POST) > 0) {
            $page_number = ($_POST['page_number']) ? $_POST['page_number'] : 1;
            if ($page_number == 0 || $page_number == 1) {
                if ($_POST['page_number']) {
                    $limit_string = "LIMIT 0,15";
                } else {
                    $limit_string = "LIMIT 0,25";
                }
            } else {
                $offsetx = ($page_number - 1) * 15;
                $limit_string = "LIMIT " . $offsetx . ",15";
            }
            $sql = "SELECT fattening_animal_vaccine.*,  fattening_animals.name, fattening_animals.code FROM fattening_animal_vaccine JOIN fattening_animals ON fattening_animal_vaccine.animal_id = fattening_animals.id  WHERE fattening_animal_vaccine.farm_id = " . $_POST['active_farm'] . " " . $limit_string . ";";
            $query = $this->db->query($sql);
            $vac_list = $query->result();

            $data['vaccination'] = $vac_list;
            $data['response_status'] = "1";
            $data['msg'] = "Success";
            echo json_encode($data);
        } else {
            $data['response_status'] = "2";
            $data['msg'] = "Invalid Request Type";
            echo json_encode($data);
        }
    }
}
