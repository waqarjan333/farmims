<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Expense_category extends Admin_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Expensecategory_model');
    }

    function index()
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('name', 'Name', 'required');

        if ($this->form_validation->run()) {
            $params = array(
                'name' => $this->input->post('name'),
                'created_by' => $this->session->userdata('id'),
                'farm_id' => $this->session->userdata('active_farm')
            );
            $this->Expensecategory_model->add_expensecategory($params);
            $this->session->set_flashdata('success', 'Expense Category Added Successfuly');
            redirect('expense_category');
        } else {

            $data['_view'] = 'expense_category/index';

            $this->load->view('layouts/main', $data);
        }
    }
    function get_list()
    {
        $columns = array(
            0 => 'name',
            1 => 'id'
        );

        // This is for sorting and pagination, it will mstly stay the same
        $limit = $this->input->post('length');
        $start = $this->input->post('start');
        $order = $columns[$this->input->post('order')[0]['column']];
        $dir = $this->input->post('order')[0]['dir'];
        // This is for sorting and pagination, it will mstly stay the same end


        $totalData = $this->Expensecategory_model->get_all_expensecategory_count();

        $totalFiltered = $totalData;

        if (empty($this->input->post('search')['value'])) {
            $posts = $this->Expensecategory_model->get_all_expensecategory($limit, $start, $order, $dir);
        } else {
            $search = $this->input->post('search')['value'];

            $posts =  $this->Expensecategory_model->expensecategory_search($limit, $start, $search, $order, $dir);

            $totalFiltered = $this->Expensecategory_model->expensecategory_search_count($search);
        }

        $data = array();
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $nestedData['name'] = $post->name;
                $nestedData['actions'] = "<button class='btn btn-warning btn-xs btn-edit' code='" . $post->id . "'>Edit</button>&nbsp;<button class='btn btn-danger btn-xs btn-delete' code='" . $post->id . "'>Delete</button>";

                $data[] = $nestedData;
            }
        }

        $json_data = array(
            "draw"            => intval($this->input->post('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);
    }


    public function edit_country($id)
    {
        # code...
    }

    public function delete_expense_category($id)
    {
        echo $this->Expensecategory_model->delete_expense_category($id);
    }

    public function update_expense_category($id)
    {
        $this->load->library('form_validation');
        $this->form_validation->set_rules('name', 'Name', 'required');
        if ($this->form_validation->run()) {

            $params = array(
                'name' => $this->input->post('name')
            );

            echo $this->Expensecategory_model->update_expense_category($id, $params);
        }
    }
}
