<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Purchase_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get animal by id
     */
    function get_po_details($id)
    {
        $this->db->select('purchase_orders.*, parties.partie_name as party_name,parties.partie_phone as phone_no');
        $this->db->join('parties', 'parties.id = purchase_orders.supplier_id');
        $this->filter_by_active_farm('purchase_orders');
        $data = $this->db->get_where('purchase_orders', array('purchase_orders.id' => $id))->row();
        $data->po_details = $this->db->get_where('po_details', array('po_id' => $data->id))->result();
        return $data;
    }

    /*
     * Get all animal count
     */
    function get_all_po_count()
    {
        $this->filter_by_active_farm();
        $query = $this->db->get('purchase_orders');
        return $query->num_rows();
    }

    /*
     * Get all animal
     */
    function get_all_po($limit, $start, $col, $dir)
    {
        $this->db->select('purchase_orders.*, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('parties', 'parties.id = purchase_orders.supplier_id');
        $this->filter_by_active_farm('purchase_orders');
        $query = $this->db->limit($limit, $start)->order_by($col, $dir)->get('purchase_orders');

        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }
    function get_all_pos_dd()
    {
        $this->filter_by_active_farm('purchase_orders');
        return $this->db->get('purchase_orders')->result_array();
    }

    function get_supplier_invoices($supplier_id)
    {
        $this->filter_by_active_farm('purchase_orders');
        $this->db->where('supplier_id', $supplier_id);
        return $this->db->get('purchase_orders')->result_array();
    }

    function get_all_invoices_dd()
    {
        $this->filter_by_active_farm('purchase_invoices');
        return $this->db->get('purchase_invoices')->result_array();
    }

    function po_search($limit, $start, $search, $col, $dir)
    {
        $this->db->select('purchase_orders.*, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('parties', 'parties.id = purchase_orders.supplier_id');
        $this->filter_by_active_farm('purchase_orders');
        $query = $this
            ->db
            ->like('purchase_orders.order_no', $search)
            ->or_like('purchase_orders.date', $search)
            ->or_like('purchase_orders.net_tot', $search)
            ->or_like('parties.partie_name', $search)
            ->or_like('parties.partie_code', $search)
            ->limit($limit, $start)
            ->order_by($col, $dir)
            ->get('purchase_orders');


        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }

    function po_search_count($search)
    {
        $this->db->select('purchase_orders.*, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('parties', 'parties.id = purchase_orders.supplier_id');
        $this->filter_by_active_farm('purchase_orders');
        $query = $this
            ->db
            ->like('purchase_orders.order_no', $search)
            ->or_like('purchase_orders.date', $search)
            ->or_like('purchase_orders.net_tot', $search)
            ->or_like('parties.partie_name', $search)
            ->or_like('parties.partie_code', $search)

            ->get('purchase_orders');

        return $query->num_rows();
    }




    function get_all_pi_count()
    {
        $this->filter_by_active_farm();
        $query = $this->db->get('purchase_invoices');
        return $query->num_rows();
    }

    function get_all_pi($limit, $start, $col, $dir)
    {
        $this->db->select('purchase_invoices.*, purchase_orders.supplier_id, purchase_orders.order_no, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('purchase_orders', 'purchase_orders.id = purchase_invoices.po_id');
        $this->db->join('parties', 'parties.id = purchase_orders.supplier_id');
        $this->filter_by_active_farm('purchase_invoices');
        $query = $this->db->limit($limit, $start)->order_by($col, $dir)->get('purchase_invoices');

        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }


    function get_all_pv_count()
    {
        $this->filter_by_active_farm();
        $query = $this->db->get('payment_voucher');
        return $query->num_rows();
    }

    function get_all_pv($limit, $start, $col, $dir)
    {
        $this->db->select('payment_voucher.*, purchase_invoices.invoice_no, purchase_invoices.net_tot, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('purchase_invoices', 'purchase_invoices.id = payment_voucher.pi_id');
        $this->db->join('parties', 'parties.id = payment_voucher.supplier_id');
        $this->filter_by_active_farm('payment_voucher');
        $query = $this->db->limit($limit, $start)->order_by($col, $dir)->get('payment_voucher');

        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }

    function get_pv_search_count($search)
    {
        $this->db->select('payment_voucher.*, purchase_invoices.invoice_no, purchase_invoices.net_tot, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('purchase_invoices', 'purchase_invoices.id = payment_voucher.pi_id');
        $this->db->join('parties', 'parties.id = payment_voucher.supplier_id');
        $this->filter_by_active_farm('payment_voucher');
        $this
        ->db
        ->or_like('purchase_invoices.date', $search)
        ->or_like('purchase_invoices.net_tot', $search)
        ->or_like('parties.partie_name', $search)
        ->or_like('parties.partie_code', $search);
        $this->db->from('payment_voucher');
        return $this->db->count_all_results();
    }

    function get_pv_search($limit, $start, $search , $col, $dir)
    {
        $this->db->select('payment_voucher.*, purchase_invoices.invoice_no, purchase_invoices.net_tot, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('purchase_invoices', 'purchase_invoices.id = payment_voucher.pi_id');
        $this->db->join('parties', 'parties.id = payment_voucher.supplier_id');
        $this->filter_by_active_farm('payment_voucher');

        $this
            ->db
            ->like('purchase_invoices.date', $search)
            ->or_like('purchase_invoices.net_tot', $search)
            ->or_like('parties.partie_name', $search)
            ->or_like('parties.partie_code', $search);

        $query = $this->db->limit($limit, $start)->order_by($col, $dir)->get('payment_voucher');

        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }


    function pi_search($limit, $start, $search, $col, $dir)
    {
        $this->db->select('purchase_invoices.*, purchase_orders.supplier_id, purchase_orders.order_no, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('purchase_orders', 'purchase_orders.id = purchase_invoices.po_id');
        $this->db->join('parties', 'parties.id = purchase_orders.supplier_id');
        $this->filter_by_active_farm('purchase_invoices');
        $query = $this
            ->db
            ->like('purchase_invoices.invoice_no', $search)
            ->like('purchase_orders.order_no', $search)
            ->or_like('purchase_invoices.date', $search)
            ->or_like('purchase_invoices.net_tot', $search)
            ->or_like('parties.partie_name', $search)
            ->or_like('parties.partie_code', $search)
            ->limit($limit, $start)
            ->order_by($col, $dir)
            ->get('purchase_invoices');


        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }

    function pi_search_count($search)
    {
        $this->db->select('purchase_invoices.*, purchase_orders.supplier_id, purchase_orders.order_no, parties.partie_name as party_name,parties.partie_code as party_code');
        $this->db->join('purchase_orders', 'purchase_orders.id = purchase_invoices.po_id');
        $this->db->join('parties', 'parties.id = purchase_orders.supplier_id');
        $this->filter_by_active_farm('purchase_invoices');
        $query = $this
            ->db
            ->like('purchase_invoices.invoice_no', $search)
            ->like('purchase_orders.order_no', $search)
            ->or_like('purchase_invoices.date', $search)
            ->or_like('purchase_invoices.net_tot', $search)
            ->or_like('parties.partie_name', $search)
            ->or_like('parties.partie_code', $search)

            ->get('purchase_invoices');

        return $query->num_rows();
    }

    function get_item_avg_cost($item_id){
        $this->db->select('sum(pi_details.qty) as qty, sum(pi_details.amount) AS amount, product.purchase_price as purchase_price');
        $this->db->join('product', 'product.id = pi_details.product_id');
        $this->filter_by_active_farm('pi_details');
        $this->db->where('pi_details.product_id',$item_id);
        $this->db->group_by("pi_details.product_id");
        return $this->db->get('pi_details')->row_array();
    }

    /*
     * function to add new animal
     */
    function add_animals($params)
    {
        $this->db->insert('animals', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update animal
     */
    function update_animal($id, $params)
    {
        $this->db->where('id', $id);
        return $this->db->update('animals   ', $params);
    }

    /*
     * function to delete animal
     */
    function delete_animal($id)
    {
        return $this->db->delete('animal', array('id' => $id));
    }
}
