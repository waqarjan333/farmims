<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Parties_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();

        // Select All Query
        // $this->db->get('country')->result_array();
    }

    /*
     * Get brand by id
     */
    function get_brand($id)
    {
        return $this->db->get_where('brand', array('id' => $id))->row_array();
    }

    /*
     * Get all brand count
     */
    function get_all_parties_count()
    {
        $this->filter_by_active_farm();
        $this->db->where('status', ACTIVE);
        $query = $this->db->get('parties');
        return $query->num_rows();
    }
    /*
     * Get all brand
     */
    function get_all_parties($limit, $start, $col, $dir)
    {
        $this->db->select('parties.*, province.name as province_name,city.name as city_name,party_category.name as category_name');
        $this->db->join('party_category', 'party_category.id = parties.party_category_id');
        $this->db->join('province', 'province.id = parties.province_id','left outer');
        $this->db->join('city', 'city.id = parties.city_id','left outer');
        $this->filter_by_active_farm('parties');
        $this->db->where('parties.status', ACTIVE);
        $query = $this->db->limit($limit, $start)->order_by($col, $dir)->get('parties');

        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }

    function get_code()
    {
        $this->filter_by_active_farm();
        $query = $this->db->get('purchase_orders');
        $numrows =  $query->num_rows();
        return $numrows + 1;
    }
     function get_socode()
    {
        $this->filter_by_active_farm();
        $query = $this->db->get('sale_orders');
        $numrows =  $query->num_rows();
        return $numrows + 1;
    }

    function get_code_pi()
    {
        $this->filter_by_active_farm();
        $query = $this->db->get('purchase_invoices');
        $numrows =  $query->num_rows();
        // echo $numrows;exit;
        return $numrows + 1;
    }
    function get_code_si()
    {
        $this->filter_by_active_farm();
        $query = $this->db->get('sale_invoices');
        $numrows =  $query->num_rows();
        // echo $numrows;exit;
        return $numrows + 1;
    }

    function get_all_suppliers(){
        $this->filter_by_active_farm();
        $this->db->where('status', ACTIVE);
        return $this->db->get_where('parties', array('type' => PARTY_TYPE_SUPPLIER))->result_array();
    }
    function get_province($id){
        
        $this->db->where('status', ACTIVE);
        return $this->db->get_where('province', array('country_id' => $id))->result_array();
    }
    
    function get_city($id){
        
        $this->db->where('status', ACTIVE);
        return $this->db->get_where('city', array('country_id' => $id))->result_array();
    }

    function get_cities_by_province($id){
        $this->db->where('status', ACTIVE);
        return $this->db->get_where('city', array('province_id' => $id))->result_array();
    }
    
    function get_all_customers(){
        $this->filter_by_active_farm();
        $this->db->where('status', ACTIVE);
        return $this->db->get_where('parties', array('type' => PARTY_TYPE_CUSTOMER))->result_array();
    }
    function get_all_units(){
        // $this->filter_by_active_farm();
        return $this->db->get_where('item_uom', array('status' => ACTIVE))->result_array();
    }

    function get_party($id)
    {
        $this->filter_by_active_farm();
        $this->db->where('status !=',DELETED);
        return $this->db->get_where('parties', array('id' => $id))->row_array();
    }

    function parties_search($limit, $start, $search, $col, $dir)
    {

        $this->db->select('parties.*, province.name as province_name,city.name as city_name,party_category.name as category_name');
        $this->db->join('party_category', 'party_category.id = parties.party_category_id');
        $this->db->join('province', 'province.id = parties.province_id','left outer');
        $this->db->join('city', 'city.id = parties.city_id','left outer');
        $this->filter_by_active_farm('parties');
        $this->db->where('parties.status', ACTIVE);
        
        $query = $this
            ->db
            ->like('parties.partie_name', $search)

            ->limit($limit, $start)
            ->order_by($col, $dir)
            ->get('parties');


        if ($query->num_rows() > 0) {
            return $query->result();
        } else {
            return null;
        }
    }

    function parties_search_count($search)
    {

        $query = $this
            ->db
            ->like('parties.partie_name', $search)

            ->get('parties');

        return $query->num_rows();
    }

    /*
     * function to add new brand
     */
    function add_parties($params)
    {
        $this->db->insert('parties', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update brand
     */
    function update_brand($id, $params)
    {
        $this->db->where('id', $id);
        return $this->db->update('brand', $params);
    }
    function update_party($id, $params)
    {
        $this->db->where('id', $id);
        return $this->db->update('parties', $params);
    }

    /*
     * function to delete brand
     */
    function delete_brand($id)
    {
        return $this->db->delete('brand', array('id' => $id));
    }
}
